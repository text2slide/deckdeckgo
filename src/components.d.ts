/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { EventEmitter, JSX } from "@stencil/core";
import { StorageFile, Template, UnsplashPhoto } from "@deckdeckgo/editor";
import { SelectedElement } from "./app/types/editor/selected-element";
import { PrismLanguage } from "./app/types/editor/prism-language";
import { InitStyleColor } from "./app/utils/editor/color.utils";
import { DeckOrDoc } from "./app/utils/core/dashboard.utils";
import { DeckAction } from "./app/types/editor/deck-action";
import { EditAction } from "./app/types/editor/edit-action";
import { ImageHelper } from "./app/helpers/editor/image.helper";
import { Expanded } from "./app/types/core/settings";
import { ImageAction } from "./app/types/editor/image-action";
import { SlotType } from "./app/types/editor/slot-type";
import { ListStyle } from "./app/types/editor/list-style";
import { TargetElement } from "./app/types/editor/target-element";
import { MoreAction } from "./app/types/editor/more-action";
import { ItemReorderEventDetail } from "@ionic/core";
import { SlideAttributes, SlideTemplate } from "./app/utils/editor/slide.utils";
import { InitTemplate } from "./app/utils/editor/create-slides.utils";
import { DeckdeckgoBarChartData, DeckdeckgoBarChartDataValue } from "@deckdeckgo/types";
import { ContentAlign, ContentList, FontSize, ToolbarActions } from "./app/lib/inline-editor/types/enums";
import { DeckdeckgoPalette } from "@deckdeckgo/color";
import { AnchorLink, ExecCommandAction, InlineAction } from "./app/lib/inline-editor/interfaces/interfaces";
export namespace Components {
    interface App404 {
    }
    interface AppActionAddSlide {
        "currentSlideIndex": number;
        "popoverCssClass": string;
        "slidesLength": number | undefined;
    }
    interface AppActionBusy {
        "iconName": string;
    }
    interface AppActionHelp {
        "link": boolean;
    }
    interface AppActionShare {
    }
    interface AppActionsDeck {
        "animatePrevNextSlide": EventEmitter;
        "deckDidChange": EventEmitter;
        "fullscreen": boolean;
        "slideNumber": number;
        "slides": JSX.IntrinsicElements[];
        "toggleFullScreen": EventEmitter;
    }
    interface AppActionsDeckEditor {
        "fullscreen": boolean;
        "hideActions": boolean;
        "selectDeck": () => Promise<void>;
        "selectStep": (element: HTMLElement | undefined) => Promise<void>;
        "slideNumber": number;
        "slides": JSX.IntrinsicElements[];
        "touch": (element: HTMLElement, autoOpen?: boolean) => Promise<void>;
    }
    interface AppActionsElement {
        "activeSlide": JSX.IntrinsicElements;
        "blurSelectedElement": () => Promise<void>;
        "elementFocus": EventEmitter;
        "reset": () => Promise<void>;
        "slideCopy": EventEmitter;
        "slideTransform": EventEmitter;
        "touch": (element: HTMLElement | undefined, autoOpen?: boolean) => Promise<void>;
        "unSelect": () => Promise<void>;
    }
    interface AppAddParagraph {
        "containerRef": HTMLElement | undefined;
    }
    interface AppArrow {
        "selectedElement": HTMLElement;
    }
    interface AppAssetData {
        "data": StorageFile;
    }
    interface AppAssetImage {
        "image": UnsplashPhoto | TenorGif | StorageFile | Waves | TenorCategory;
    }
    interface AppAvatar {
        "ariaLabel": string;
        "src": string;
    }
    interface AppBlock {
        "selectedElement": SelectedElement;
    }
    interface AppBlockChart {
        "selectedElement": HTMLElement;
    }
    interface AppBorderColor {
        "selectedElement": SelectedElement;
    }
    interface AppBorderRadius {
        "selectedElement": SelectedElement;
    }
    interface AppBottomSheet {
    }
    interface AppBoxShadow {
        "selectedElement": SelectedElement;
    }
    interface AppBreadcrumbs {
        "slideNumber": number;
    }
    interface AppCloseMenu {
    }
    interface AppCloudWait {
    }
    interface AppCode {
        "codeDidChange": EventEmitter<HTMLElement>;
        "selectedElement": HTMLElement;
    }
    interface AppCodeLanguages {
        "codeDidChange": EventEmitter<HTMLElement>;
        "currentLanguage": PrismLanguage | undefined;
        "selectedElement": HTMLElement;
    }
    interface AppColor {
        "defaultColor": string;
        "initColor": () => Promise<InitStyleColor>;
        "loadColor": () => Promise<void>;
    }
    interface AppColorChart {
        "selectedElement": HTMLElement;
    }
    interface AppColorCode {
        "selectedElement": HTMLElement;
    }
    interface AppColorFillStroke {
        "colorType": 'fill' | 'stroke';
        "deck": boolean;
        "selectedElement": HTMLElement;
        "slide": boolean;
    }
    interface AppColorLine {
        "selectedElement": HTMLElement;
    }
    interface AppColorQrcode {
        "selectedElement": HTMLElement;
    }
    interface AppColorSides {
        "selectedElement": HTMLElement;
        "template": 'split' | 'author';
    }
    interface AppColorTextBackground {
        "colorType": 'text' | 'background';
        "deck": boolean;
        "selectedElement": HTMLElement;
        "slide": boolean;
    }
    interface AppColorWordCloud {
        "selectedElement": HTMLElement;
    }
    interface AppCopyStyle {
        "selectedElement": HTMLElement;
    }
    interface AppCreateSlide {
        "currentSlideIndex": number;
    }
    interface AppCustomization {
    }
    interface AppDashboardActions {
        "data": DeckOrDoc;
        "disableDelete": boolean;
    }
    interface AppDeckEditor {
        "initNewDeck": () => Promise<void>;
    }
    interface AppDeckFonts {
        "deckElement": HTMLElement;
    }
    interface AppDeckHeaderFooter {
        "deckDidChange": EventEmitter<HTMLElement>;
        "deckElement": HTMLElement;
    }
    interface AppDeckPagenumber {
        "deckDidChange": EventEmitter<HTMLElement>;
        "deckElement": HTMLDeckgoDeckElement;
        "slideNumber": number;
    }
    interface AppDeckStyle {
        "deckDidChange": EventEmitter<HTMLElement>;
        "slideNumber": number;
    }
    interface AppDeckTransition {
        "deckElement": HTMLDeckgoDeckElement;
    }
    interface AppDecks {
    }
    interface AppDelete {
    }
    interface AppDemo {
        "selectedElement": HTMLElement;
    }
    interface AppDocEditor {
        "initNewDoc": () => Promise<void>;
    }
    interface AppDocIndicator {
    }
    interface AppDocs {
    }
    interface AppEditMode {
    }
    interface AppEditSlide {
        "selectedElement": SelectedElement;
        "slideDidChange": EventEmitter<HTMLElement>;
    }
    interface AppEditSlideAuthor {
        "selectedElement": HTMLElement;
        "slideDidChange": EventEmitter<HTMLElement>;
    }
    interface AppEditSlideChart {
        "selectedElement": HTMLElement;
        "slideDidChange": EventEmitter<HTMLElement>;
    }
    interface AppEditSlideQrcode {
        "selectedElement": HTMLElement;
        "slideDidChange": EventEmitter<HTMLElement>;
    }
    interface AppEditSlideUser {
        "selectedElement": SelectedElement;
        "slideDidChange": EventEmitter<HTMLElement>;
    }
    interface AppEditor {
    }
    interface AppElementAlignment {
        "selectedElement": SelectedElement;
    }
    interface AppElementStyle {
        "imageHelper": ImageHelper;
        "imgDidChange": EventEmitter<HTMLElement>;
        "selectedElement": SelectedElement;
    }
    interface AppEmbed {
    }
    interface AppExpansionPanel {
        "expanded": Expanded;
        "expander": boolean;
    }
    interface AppFullscreenInfo {
    }
    interface AppGetHelp {
    }
    interface AppGif {
    }
    interface AppImageChoice {
        "deck": boolean;
        "deleteBackground": boolean;
        "selectedElement": HTMLElement;
        "slide": boolean;
    }
    interface AppImageElement {
        "selectedElement": HTMLElement;
        "slide": boolean;
    }
    interface AppImageHistory {
        "deck": boolean;
        "slide": boolean;
    }
    interface AppImageStyle {
        "selectedElement": HTMLElement;
    }
    interface AppLineWidth {
        "selectedElement": HTMLElement;
    }
    interface AppLinks {
    }
    interface AppList {
        "selectedElement": HTMLElement;
    }
    interface AppLogo {
    }
    interface AppMath {
        "mathDidChange": EventEmitter<HTMLElement>;
        "selectedElement": HTMLElement;
    }
    interface AppMenu {
    }
    interface AppMoreDeckActions {
    }
    interface AppMoreElementActions {
        "clone": boolean;
        "images": boolean;
        "notes": boolean;
        "transform": boolean;
    }
    interface AppMoreFileActions {
    }
    interface AppMoreShareOptions {
    }
    interface AppNavigation {
        "actions": 'all' | 'none' | 'editor-less';
    }
    interface AppNavigationEnd {
        "editorActions": boolean;
    }
    interface AppNavigationStart {
    }
    interface AppNew {
    }
    interface AppNoTemplates {
    }
    interface AppNotes {
        "selectedElement": HTMLElement;
    }
    interface AppPlayground {
        "selectedElement": HTMLElement;
    }
    interface AppPlaygroundPlaceholder {
    }
    interface AppPoll {
        "pollKey": string;
    }
    interface AppPollOptions {
        "selectedElement": HTMLElement;
        "slideDidChange": EventEmitter<HTMLElement>;
    }
    interface AppPopoverConfirm {
    }
    interface AppPresent {
        "fullscreen": boolean;
    }
    interface AppProfile {
    }
    interface AppPublish {
    }
    interface AppPublishDone {
        "publishedUrl": string;
    }
    interface AppPublishEdit {
    }
    interface AppPublishTags {
        "disableRemove": boolean;
        "tags": string[];
    }
    interface AppRandomGif {
        "keyword": string;
    }
    interface AppRemoteConnect {
    }
    interface AppRemoteRequest {
    }
    interface AppReveal {
        "selectedElement": HTMLElement;
    }
    interface AppRoot {
    }
    interface AppSelectTargetElement {
        "chart": boolean;
        "code": boolean;
        "headerFooter": boolean;
        "image": boolean;
        "qrCode": boolean;
        "shape": boolean;
        "sides": boolean;
        "slide": boolean;
        "textTarget": boolean;
        "transition": boolean;
        "wordCloud": boolean;
    }
    interface AppShape {
        "selectedElement": HTMLElement;
    }
    interface AppShare {
    }
    interface AppShareOptions {
    }
    interface AppSignin {
    }
    interface AppSigninPage {
    }
    interface AppSlideNavigate {
    }
    interface AppSlidePreview {
        "deckRef": HTMLDeckgoDeckElement;
    }
    interface AppSlideThumbnail {
        "deck": HTMLDeckgoDeckElement;
        "slide": HTMLElement;
    }
    interface AppSlideWarning {
    }
    interface AppSlideWarningInfo {
        "lowContrast": boolean;
        "overflow": boolean;
    }
    interface AppSlidesAside {
        "activeIndex": number;
        "deckRef": HTMLDeckgoDeckElement;
    }
    interface AppSlotType {
        "selectedElement": HTMLElement | undefined;
        "skip": boolean;
        "slotTypes": SlotType[] | undefined;
    }
    interface AppSpinner {
    }
    interface AppStackingOrder {
        "activeSlideChildren": JSX.IntrinsicElements;
        "selectedElement": HTMLElement;
    }
    interface AppStorage {
    }
    interface AppStorageAdmin {
        "storageFile": StorageFile;
    }
    interface AppStorageData {
    }
    interface AppStorageFiles {
        "admin": boolean;
        "folder": 'data' | 'images';
        "resetAndSearch": () => Promise<void>;
    }
    interface AppStorageImages {
    }
    interface AppStrokeWidth {
        "selectedElement": HTMLElement;
    }
    interface AppSyncInfo {
    }
    interface AppTemplate {
        "template": Template | undefined;
    }
    interface AppTemplateShowcase {
        "author": boolean;
        "editable": boolean;
        "template": Template;
    }
    interface AppTemplates {
    }
    interface AppTemplatesCharts {
    }
    interface AppTemplatesCommunity {
    }
    interface AppTemplatesContent {
        "highlight": boolean;
        "highlightIndex": number | undefined;
        "selected": boolean;
    }
    interface AppTemplatesDefault {
    }
    interface AppTemplatesSplit {
        "highlight": boolean;
        "highlightIndex": number | undefined;
        "selected": boolean;
        "vertical": boolean;
    }
    interface AppTemplatesTitle {
        "highlight": boolean;
        "highlightIndex": number | undefined;
        "selected": boolean;
    }
    interface AppTemplatesUser {
    }
    interface AppText {
        "deckDidChange": EventEmitter<HTMLElement>;
        "selectedElement": SelectedElement;
    }
    interface AppTextChart {
        "selectedElement": HTMLElement;
    }
    interface AppTransformElement {
        "selectedElement": HTMLElement;
    }
    interface AppTransformParagraph {
        "containerRef": HTMLElement | undefined;
    }
    interface AppTransformSlide {
        "selectedElement": HTMLElement;
    }
    interface AppUnpublish {
    }
    interface AppUnsplash {
    }
    interface AppUserDelete {
        "username": string;
    }
    interface AppUserInfo {
        "displayAvatar": boolean;
    }
    interface AppUserMenu {
    }
    interface AppWaves {
    }
    interface AppYoutube {
        "selectedElement": HTMLElement;
    }
    interface DeckdeckgoLine {
        "draw": (startPoint?: [number, number], endPoint?: [number, number]) => Promise<void>;
        "endArrow": boolean;
        "isEditable": boolean;
        "lineColor": string;
        "lineWidth": number;
        "pointer": string;
        "startArrow": boolean;
    }
    interface DeckdeckgoLineElbow {
        "draw": (startPoint?: [number, number], endPoint?: [number, number]) => Promise<void>;
        "endArrow": boolean;
        "isEditable": boolean;
        "lineColor": string;
        "lineWidth": number;
        "pointer": string;
        "router": string;
        "startArrow": boolean;
    }
    interface DeckgoCustomBarChart {
        /**
          * Display multiple graphs and animate the transition between these
         */
        "animation": boolean;
        /**
          * Duration of the transition between graphs
         */
        "animationDuration": number;
        /**
          * Set to `true` in case you would like to load (fetch) the data by yourself. Useful in case your data are protected with a token.
         */
        "customLoader": boolean;
        /**
          * Instead of a source file, source data can also be provided as an array of `DeckdeckgoBarChartData`
         */
        "data": DeckdeckgoBarChartData[];
        /**
          * In case you would like to redraw your chart, for example on resize of the window.
          * @param width
          * @param height
         */
        "draw": (width?: number, height?: number) => Promise<void>;
        "fontFamily": string;
        "fontSize": string;
        /**
          * The height of the chart
         */
        "height": number;
        /**
          * Is animation at the begin of the serie.
         */
        "isBeginning": () => Promise<boolean>;
        /**
          * Is animation at the end of the serie.
         */
        "isEnd": () => Promise<boolean>;
        /**
          * The margin bottom of the chart in pixel
         */
        "marginBottom": number;
        /**
          * The margin left of the chart in pixel
         */
        "marginLeft": number;
        /**
          * The margin right of the chart in pixel
         */
        "marginRight": number;
        /**
          * The margin top of the chart in pixel
         */
        "marginTop": number;
        /**
          * If you are using animation, this method is used to display the next data respectively the next chart.
         */
        "next": () => Promise<void>;
        /**
          * If you "manually" load the data, call this method once the text content fetched.
          * @param content
         */
        "postCustomLoad": (content: string | undefined) => Promise<void>;
        /**
          * If you are using animation, this method is used to display the previous data respectively the previous chart.
         */
        "prev": () => Promise<void>;
        /**
          * The line separator use in your csv file
         */
        "separator": string;
        /**
          * The path to the source file of the data
         */
        "src": string;
        /**
          * This is the method we are using to refresh the current bar chart when an audience is participating to live vote. It will not redraw the axis but it will draw and animate the bars.
          * @param values
         */
        "updateCurrentBar": (values: DeckdeckgoBarChartDataValue[]) => Promise<void>;
        /**
          * The width of the chart
         */
        "width": number;
        /**
          * If `false`, no axis y will be draw.
         */
        "yAxis": boolean;
        /**
          * Set a minimal value for the y Axis. Useful in case the series of data could contains only zeros.
         */
        "yAxisMin": number;
    }
    interface DeckgoCustomHorizontalBarChart {
        /**
          * Display multiple graphs and animate the transition between these
         */
        "animation": boolean;
        /**
          * Duration of the transition between graphs
         */
        "animationDuration": number;
        /**
          * Set to `true` in case you would like to load (fetch) the data by yourself. Useful in case your data are protected with a token.
         */
        "customLoader": boolean;
        /**
          * Instead of a source file, source data can also be provided as an array of `DeckdeckgoBarChartData`
         */
        "data": DeckdeckgoBarChartData[];
        /**
          * In case you would like to redraw your chart, for example on resize of the window.
          * @param width
          * @param height
         */
        "draw": (width?: number, height?: number) => Promise<void>;
        "fontFamily": string;
        "fontSize": string;
        /**
          * The height of the chart
         */
        "height": number;
        /**
          * Is animation at the begin of the serie.
         */
        "isBeginning": () => Promise<boolean>;
        /**
          * Is animation at the end of the serie.
         */
        "isEnd": () => Promise<boolean>;
        /**
          * The margin bottom of the chart in pixel
         */
        "marginBottom": number;
        /**
          * The margin left of the chart in pixel
         */
        "marginLeft": number;
        /**
          * The margin right of the chart in pixel
         */
        "marginRight": number;
        /**
          * The margin top of the chart in pixel
         */
        "marginTop": number;
        /**
          * If you are using animation, this method is used to display the next data respectively the next chart.
         */
        "next": () => Promise<void>;
        /**
          * If you "manually" load the data, call this method once the text content fetched.
          * @param content
         */
        "postCustomLoad": (content: string | undefined) => Promise<void>;
        /**
          * If you are using animation, this method is used to display the previous data respectively the previous chart.
         */
        "prev": () => Promise<void>;
        /**
          * The line separator use in your csv file
         */
        "separator": string;
        /**
          * The path to the source file of the data
         */
        "src": string;
        /**
          * This is the method we are using to refresh the current bar chart when an audience is participating to live vote. It will not redraw the axis but it will draw and animate the bars.
          * @param values
         */
        "updateCurrentBar": (values: DeckdeckgoBarChartDataValue[]) => Promise<void>;
        /**
          * The width of the chart
         */
        "width": number;
        /**
          * If `false`, no axis x will be draw.
         */
        "xAxis": boolean;
        /**
          * Set a minimal value for the x Axis. Useful in case the series of data could contains only zeros.
         */
        "xAxisMin": number;
    }
    interface DeckgoCustomIeActionButton {
        "cssClass": string;
        "disableAction": boolean;
        "mobile": boolean;
    }
    interface DeckgoCustomIeActionImage {
        "cssClass": string;
    }
    interface DeckgoCustomIeAlignActions {
        "anchorEvent": MouseEvent | TouchEvent;
        "containers": string;
        "contentAlign": ContentAlign;
        "mobile": boolean;
        "sticky": boolean;
    }
    interface DeckgoCustomIeColorActions {
        "action": 'color' | 'background-color';
        "mobile": boolean;
        "palette": DeckdeckgoPalette[];
        "selection": Selection;
    }
    interface DeckgoCustomIeFontSizeActions {
        "fontSize": FontSize;
        "mobile": boolean;
        "sticky": boolean;
    }
    interface DeckgoCustomIeImageActions {
        "anchorEvent": MouseEvent | TouchEvent;
        "containers": string;
        "imgAnchor": string;
        "imgDidChange": EventEmitter<HTMLElement>;
        "imgPropertyCssFloat": string;
        "imgPropertyWidth": string;
        "mobile": boolean;
    }
    interface DeckgoCustomIeLinkActions {
        "anchorLink": AnchorLink;
        "containers": string;
        "linkCreated": EventEmitter<HTMLElement>;
        "mobile": boolean;
        "selection": Selection;
        "toolbarActions": ToolbarActions;
    }
    interface DeckgoCustomIeListActions {
        "contentList": ContentList;
        "disabledTitle": boolean;
        "mobile": boolean;
        "selection": Selection;
        "sticky": boolean;
    }
    interface DeckgoCustomIeSeparator {
        "mobile": boolean;
    }
    interface DeckgoCustomIeStyleActions {
        "bold": boolean;
        "disabledTitle": boolean;
        "italic": boolean;
        "mobile": boolean;
        "selection": Selection;
        "strikethrough": boolean;
        "underline": boolean;
    }
    interface DeckgoCustomIeTriangle {
        "mobile": boolean;
    }
    interface DeckgoCustomInlineEditor {
        "align": boolean;
        "attachTo": HTMLElement;
        "backgroundColor": boolean;
        "containers": string;
        "customActions": string;
        "fontSize": boolean;
        "imgAnchor": string;
        "imgEditable": boolean;
        "imgPropertyCssFloat": string;
        "imgPropertyWidth": string;
        "list": boolean;
        "mobile": boolean;
        "palette": DeckdeckgoPalette[];
        "reset": (clearSelection: boolean, blurActiveElement?: boolean) => Promise<void>;
        "stickyDesktop": boolean;
        "stickyMobile": boolean;
    }
    interface DeckgoCustomLineChart {
        /**
          * Display multiple graphs and animate the transition between these
         */
        "animation": boolean;
        /**
          * Duration of the transition between graphs
         */
        "animationDuration": number;
        /**
          * Draw the area.
         */
        "area": boolean;
        /**
          * Set to `true` in case you would like to load (fetch) the data by yourself. Useful in case your data are protected with a token.
         */
        "customLoader": boolean;
        /**
          * The pattern for the dates. All supported date format: https://date-fns.org/v2.0.0-alpha.26/docs/parse.
         */
        "datePattern": string;
        /**
          * In case you would like to redraw your chart, for example on resize of the window.
          * @param width
          * @param height
         */
        "draw": (width?: number, height?: number) => Promise<void>;
        "fontFamily": string;
        "fontSize": string;
        /**
          * Render a grid behind the chart.
         */
        "grid": boolean;
        /**
          * The height of the chart
         */
        "height": number;
        /**
          * Is animation at the begin of the serie.
         */
        "isBeginning": () => Promise<boolean>;
        /**
          * Is animation at the end of the serie.
         */
        "isEnd": () => Promise<boolean>;
        /**
          * The margin bottom of the chart in pixel
         */
        "marginBottom": number;
        /**
          * The margin left of the chart in pixel
         */
        "marginLeft": number;
        /**
          * The margin right of the chart in pixel
         */
        "marginRight": number;
        /**
          * The margin top of the chart in pixel
         */
        "marginTop": number;
        /**
          * If you are using animation, this method is used to display the next data respectively the next chart.
         */
        "next": () => Promise<void>;
        "postCustomLoad": (content: string | undefined) => Promise<void>;
        /**
          * If you are using animation, this method is used to display the previous data respectively the previous chart.
         */
        "prev": () => Promise<void>;
        /**
          * The line separator use in your csv file
         */
        "separator": string;
        /**
          * Render smooth lines or with edges.
         */
        "smooth": boolean;
        /**
          * The path to the source file of the data
         */
        "src": string;
        /**
          * Render ticks on the axes.
         */
        "ticks": number;
        /**
          * The width of the chart
         */
        "width": number;
        /**
          * The y axis behavior.
         */
        "yAxisDomain": string;
    }
    interface DeckgoCustomPieChart {
        /**
          * Display multiple graphs and animate the transition between these
         */
        "animation": boolean;
        /**
          * Duration of the transition between graphs
         */
        "animationDuration": number;
        /**
          * Set to `true` in case you would like to load (fetch) the data by yourself. Useful in case your data are protected with a token.
         */
        "customLoader": boolean;
        /**
          * In case you would like to redraw your chart, for example on resize of the window.
          * @param width
          * @param height
         */
        "draw": (width?: number, height?: number) => Promise<void>;
        "fontFamily": string;
        "fontSize": string;
        /**
          * The height of the chart
         */
        "height": number;
        /**
          * The inner radius of the pie
         */
        "innerRadius": number;
        /**
          * Is animation at the begin of the serie.
         */
        "isBeginning": () => Promise<boolean>;
        /**
          * Is animation at the end of the serie.
         */
        "isEnd": () => Promise<boolean>;
        /**
          * The margin bottom of the chart in pixel
         */
        "marginBottom": number;
        /**
          * The margin left of the chart in pixel
         */
        "marginLeft": number;
        /**
          * The margin right of the chart in pixel
         */
        "marginRight": number;
        /**
          * The margin top of the chart in pixel
         */
        "marginTop": number;
        /**
          * If you are using animation, this method is used to display the next data respectively the next chart.
         */
        "next": () => Promise<void>;
        "postCustomLoad": (content: string | undefined) => Promise<void>;
        /**
          * If you are using animation, this method is used to display the previous data respectively the previous chart.
         */
        "prev": () => Promise<void>;
        /**
          * The line separator use in your csv file
         */
        "separator": string;
        /**
          * The path to the source file of the data
         */
        "src": string;
        /**
          * The width of the chart
         */
        "width": number;
    }
    interface DeckgoDrrText {
        "connected": boolean;
        /**
          * Allow the component to be dragged in which direction
         */
        "drag": 'x-axis' | 'y-axis' | 'all' | 'none';
        /**
          * Allow or not the resize actions
         */
        "resize": boolean;
        /**
          * Allow or not the rotation of the element
         */
        "rotation": boolean;
        /**
          * Useful for shape edition.
         */
        "shape": boolean;
        /**
          * To be used if your slotted element is to be defined as contentEditable. Useful for text edition.
         */
        "text": boolean;
        /**
          * The component could be use with percentage, viewport (vw/vh) or pixels (px) units. All relative to the container
         */
        "unit": 'percentage' | 'viewport' | 'px';
    }
    interface DeckgoIeFontFamilyActions {
        "attachTo": HTMLElement;
        "fontFamily": string;
        "mobile": boolean;
    }
    interface DeckgoSlideChartCustom {
        "afterSwipe": () => Promise<void>;
        "animation": boolean;
        "animationDuration": number;
        "area": string;
        "beforeSwipe": (enter: boolean, _reveal: boolean) => Promise<boolean>;
        "chartHeightCss": string;
        "chartWidthCss": string;
        /**
          * If you provide actions for the all deck but, a specific one for this slide, set this option to true
         */
        "customActions": boolean;
        /**
          * If you define a background for the all deck but, a specific one for this slide, set this option to true
         */
        "customBackground": boolean;
        "customLoader": boolean;
        "datePattern": string;
        "draw": () => Promise<void>;
        /**
          * Returns the list of the random colors that have been generated.
         */
        "getRandomColors": () => Promise<string[] | undefined | null>;
        "grid": string;
        "height": number;
        "hideContent": () => Promise<void>;
        "innerRadius": number;
        "lazyLoadContent": () => Promise<void>;
        "marginBottom": number;
        "marginLeft": number;
        "marginRight": number;
        "marginTop": number;
        "postCustomLoad": (content: string | undefined) => Promise<void>;
        "range": string[];
        "resizeContent": () => Promise<void>;
        "revealContent": () => Promise<void>;
        "separator": string;
        "smooth": string;
        "src": string;
        "ticks": number;
        /**
          * The type of the chart, pie, line or bar
         */
        "type": string;
        "width": number;
        "yAxisDomain": string;
    }
}
declare global {
    interface HTMLApp404Element extends Components.App404, HTMLStencilElement {
    }
    var HTMLApp404Element: {
        prototype: HTMLApp404Element;
        new (): HTMLApp404Element;
    };
    interface HTMLAppActionAddSlideElement extends Components.AppActionAddSlide, HTMLStencilElement {
    }
    var HTMLAppActionAddSlideElement: {
        prototype: HTMLAppActionAddSlideElement;
        new (): HTMLAppActionAddSlideElement;
    };
    interface HTMLAppActionBusyElement extends Components.AppActionBusy, HTMLStencilElement {
    }
    var HTMLAppActionBusyElement: {
        prototype: HTMLAppActionBusyElement;
        new (): HTMLAppActionBusyElement;
    };
    interface HTMLAppActionHelpElement extends Components.AppActionHelp, HTMLStencilElement {
    }
    var HTMLAppActionHelpElement: {
        prototype: HTMLAppActionHelpElement;
        new (): HTMLAppActionHelpElement;
    };
    interface HTMLAppActionShareElement extends Components.AppActionShare, HTMLStencilElement {
    }
    var HTMLAppActionShareElement: {
        prototype: HTMLAppActionShareElement;
        new (): HTMLAppActionShareElement;
    };
    interface HTMLAppActionsDeckElement extends Components.AppActionsDeck, HTMLStencilElement {
    }
    var HTMLAppActionsDeckElement: {
        prototype: HTMLAppActionsDeckElement;
        new (): HTMLAppActionsDeckElement;
    };
    interface HTMLAppActionsDeckEditorElement extends Components.AppActionsDeckEditor, HTMLStencilElement {
    }
    var HTMLAppActionsDeckEditorElement: {
        prototype: HTMLAppActionsDeckEditorElement;
        new (): HTMLAppActionsDeckEditorElement;
    };
    interface HTMLAppActionsElementElement extends Components.AppActionsElement, HTMLStencilElement {
    }
    var HTMLAppActionsElementElement: {
        prototype: HTMLAppActionsElementElement;
        new (): HTMLAppActionsElementElement;
    };
    interface HTMLAppAddParagraphElement extends Components.AppAddParagraph, HTMLStencilElement {
    }
    var HTMLAppAddParagraphElement: {
        prototype: HTMLAppAddParagraphElement;
        new (): HTMLAppAddParagraphElement;
    };
    interface HTMLAppArrowElement extends Components.AppArrow, HTMLStencilElement {
    }
    var HTMLAppArrowElement: {
        prototype: HTMLAppArrowElement;
        new (): HTMLAppArrowElement;
    };
    interface HTMLAppAssetDataElement extends Components.AppAssetData, HTMLStencilElement {
    }
    var HTMLAppAssetDataElement: {
        prototype: HTMLAppAssetDataElement;
        new (): HTMLAppAssetDataElement;
    };
    interface HTMLAppAssetImageElement extends Components.AppAssetImage, HTMLStencilElement {
    }
    var HTMLAppAssetImageElement: {
        prototype: HTMLAppAssetImageElement;
        new (): HTMLAppAssetImageElement;
    };
    interface HTMLAppAvatarElement extends Components.AppAvatar, HTMLStencilElement {
    }
    var HTMLAppAvatarElement: {
        prototype: HTMLAppAvatarElement;
        new (): HTMLAppAvatarElement;
    };
    interface HTMLAppBlockElement extends Components.AppBlock, HTMLStencilElement {
    }
    var HTMLAppBlockElement: {
        prototype: HTMLAppBlockElement;
        new (): HTMLAppBlockElement;
    };
    interface HTMLAppBlockChartElement extends Components.AppBlockChart, HTMLStencilElement {
    }
    var HTMLAppBlockChartElement: {
        prototype: HTMLAppBlockChartElement;
        new (): HTMLAppBlockChartElement;
    };
    interface HTMLAppBorderColorElement extends Components.AppBorderColor, HTMLStencilElement {
    }
    var HTMLAppBorderColorElement: {
        prototype: HTMLAppBorderColorElement;
        new (): HTMLAppBorderColorElement;
    };
    interface HTMLAppBorderRadiusElement extends Components.AppBorderRadius, HTMLStencilElement {
    }
    var HTMLAppBorderRadiusElement: {
        prototype: HTMLAppBorderRadiusElement;
        new (): HTMLAppBorderRadiusElement;
    };
    interface HTMLAppBottomSheetElement extends Components.AppBottomSheet, HTMLStencilElement {
    }
    var HTMLAppBottomSheetElement: {
        prototype: HTMLAppBottomSheetElement;
        new (): HTMLAppBottomSheetElement;
    };
    interface HTMLAppBoxShadowElement extends Components.AppBoxShadow, HTMLStencilElement {
    }
    var HTMLAppBoxShadowElement: {
        prototype: HTMLAppBoxShadowElement;
        new (): HTMLAppBoxShadowElement;
    };
    interface HTMLAppBreadcrumbsElement extends Components.AppBreadcrumbs, HTMLStencilElement {
    }
    var HTMLAppBreadcrumbsElement: {
        prototype: HTMLAppBreadcrumbsElement;
        new (): HTMLAppBreadcrumbsElement;
    };
    interface HTMLAppCloseMenuElement extends Components.AppCloseMenu, HTMLStencilElement {
    }
    var HTMLAppCloseMenuElement: {
        prototype: HTMLAppCloseMenuElement;
        new (): HTMLAppCloseMenuElement;
    };
    interface HTMLAppCloudWaitElement extends Components.AppCloudWait, HTMLStencilElement {
    }
    var HTMLAppCloudWaitElement: {
        prototype: HTMLAppCloudWaitElement;
        new (): HTMLAppCloudWaitElement;
    };
    interface HTMLAppCodeElement extends Components.AppCode, HTMLStencilElement {
    }
    var HTMLAppCodeElement: {
        prototype: HTMLAppCodeElement;
        new (): HTMLAppCodeElement;
    };
    interface HTMLAppCodeLanguagesElement extends Components.AppCodeLanguages, HTMLStencilElement {
    }
    var HTMLAppCodeLanguagesElement: {
        prototype: HTMLAppCodeLanguagesElement;
        new (): HTMLAppCodeLanguagesElement;
    };
    interface HTMLAppColorElement extends Components.AppColor, HTMLStencilElement {
    }
    var HTMLAppColorElement: {
        prototype: HTMLAppColorElement;
        new (): HTMLAppColorElement;
    };
    interface HTMLAppColorChartElement extends Components.AppColorChart, HTMLStencilElement {
    }
    var HTMLAppColorChartElement: {
        prototype: HTMLAppColorChartElement;
        new (): HTMLAppColorChartElement;
    };
    interface HTMLAppColorCodeElement extends Components.AppColorCode, HTMLStencilElement {
    }
    var HTMLAppColorCodeElement: {
        prototype: HTMLAppColorCodeElement;
        new (): HTMLAppColorCodeElement;
    };
    interface HTMLAppColorFillStrokeElement extends Components.AppColorFillStroke, HTMLStencilElement {
    }
    var HTMLAppColorFillStrokeElement: {
        prototype: HTMLAppColorFillStrokeElement;
        new (): HTMLAppColorFillStrokeElement;
    };
    interface HTMLAppColorLineElement extends Components.AppColorLine, HTMLStencilElement {
    }
    var HTMLAppColorLineElement: {
        prototype: HTMLAppColorLineElement;
        new (): HTMLAppColorLineElement;
    };
    interface HTMLAppColorQrcodeElement extends Components.AppColorQrcode, HTMLStencilElement {
    }
    var HTMLAppColorQrcodeElement: {
        prototype: HTMLAppColorQrcodeElement;
        new (): HTMLAppColorQrcodeElement;
    };
    interface HTMLAppColorSidesElement extends Components.AppColorSides, HTMLStencilElement {
    }
    var HTMLAppColorSidesElement: {
        prototype: HTMLAppColorSidesElement;
        new (): HTMLAppColorSidesElement;
    };
    interface HTMLAppColorTextBackgroundElement extends Components.AppColorTextBackground, HTMLStencilElement {
    }
    var HTMLAppColorTextBackgroundElement: {
        prototype: HTMLAppColorTextBackgroundElement;
        new (): HTMLAppColorTextBackgroundElement;
    };
    interface HTMLAppColorWordCloudElement extends Components.AppColorWordCloud, HTMLStencilElement {
    }
    var HTMLAppColorWordCloudElement: {
        prototype: HTMLAppColorWordCloudElement;
        new (): HTMLAppColorWordCloudElement;
    };
    interface HTMLAppCopyStyleElement extends Components.AppCopyStyle, HTMLStencilElement {
    }
    var HTMLAppCopyStyleElement: {
        prototype: HTMLAppCopyStyleElement;
        new (): HTMLAppCopyStyleElement;
    };
    interface HTMLAppCreateSlideElement extends Components.AppCreateSlide, HTMLStencilElement {
    }
    var HTMLAppCreateSlideElement: {
        prototype: HTMLAppCreateSlideElement;
        new (): HTMLAppCreateSlideElement;
    };
    interface HTMLAppCustomizationElement extends Components.AppCustomization, HTMLStencilElement {
    }
    var HTMLAppCustomizationElement: {
        prototype: HTMLAppCustomizationElement;
        new (): HTMLAppCustomizationElement;
    };
    interface HTMLAppDashboardActionsElement extends Components.AppDashboardActions, HTMLStencilElement {
    }
    var HTMLAppDashboardActionsElement: {
        prototype: HTMLAppDashboardActionsElement;
        new (): HTMLAppDashboardActionsElement;
    };
    interface HTMLAppDeckEditorElement extends Components.AppDeckEditor, HTMLStencilElement {
    }
    var HTMLAppDeckEditorElement: {
        prototype: HTMLAppDeckEditorElement;
        new (): HTMLAppDeckEditorElement;
    };
    interface HTMLAppDeckFontsElement extends Components.AppDeckFonts, HTMLStencilElement {
    }
    var HTMLAppDeckFontsElement: {
        prototype: HTMLAppDeckFontsElement;
        new (): HTMLAppDeckFontsElement;
    };
    interface HTMLAppDeckHeaderFooterElement extends Components.AppDeckHeaderFooter, HTMLStencilElement {
    }
    var HTMLAppDeckHeaderFooterElement: {
        prototype: HTMLAppDeckHeaderFooterElement;
        new (): HTMLAppDeckHeaderFooterElement;
    };
    interface HTMLAppDeckPagenumberElement extends Components.AppDeckPagenumber, HTMLStencilElement {
    }
    var HTMLAppDeckPagenumberElement: {
        prototype: HTMLAppDeckPagenumberElement;
        new (): HTMLAppDeckPagenumberElement;
    };
    interface HTMLAppDeckStyleElement extends Components.AppDeckStyle, HTMLStencilElement {
    }
    var HTMLAppDeckStyleElement: {
        prototype: HTMLAppDeckStyleElement;
        new (): HTMLAppDeckStyleElement;
    };
    interface HTMLAppDeckTransitionElement extends Components.AppDeckTransition, HTMLStencilElement {
    }
    var HTMLAppDeckTransitionElement: {
        prototype: HTMLAppDeckTransitionElement;
        new (): HTMLAppDeckTransitionElement;
    };
    interface HTMLAppDecksElement extends Components.AppDecks, HTMLStencilElement {
    }
    var HTMLAppDecksElement: {
        prototype: HTMLAppDecksElement;
        new (): HTMLAppDecksElement;
    };
    interface HTMLAppDeleteElement extends Components.AppDelete, HTMLStencilElement {
    }
    var HTMLAppDeleteElement: {
        prototype: HTMLAppDeleteElement;
        new (): HTMLAppDeleteElement;
    };
    interface HTMLAppDemoElement extends Components.AppDemo, HTMLStencilElement {
    }
    var HTMLAppDemoElement: {
        prototype: HTMLAppDemoElement;
        new (): HTMLAppDemoElement;
    };
    interface HTMLAppDocEditorElement extends Components.AppDocEditor, HTMLStencilElement {
    }
    var HTMLAppDocEditorElement: {
        prototype: HTMLAppDocEditorElement;
        new (): HTMLAppDocEditorElement;
    };
    interface HTMLAppDocIndicatorElement extends Components.AppDocIndicator, HTMLStencilElement {
    }
    var HTMLAppDocIndicatorElement: {
        prototype: HTMLAppDocIndicatorElement;
        new (): HTMLAppDocIndicatorElement;
    };
    interface HTMLAppDocsElement extends Components.AppDocs, HTMLStencilElement {
    }
    var HTMLAppDocsElement: {
        prototype: HTMLAppDocsElement;
        new (): HTMLAppDocsElement;
    };
    interface HTMLAppEditModeElement extends Components.AppEditMode, HTMLStencilElement {
    }
    var HTMLAppEditModeElement: {
        prototype: HTMLAppEditModeElement;
        new (): HTMLAppEditModeElement;
    };
    interface HTMLAppEditSlideElement extends Components.AppEditSlide, HTMLStencilElement {
    }
    var HTMLAppEditSlideElement: {
        prototype: HTMLAppEditSlideElement;
        new (): HTMLAppEditSlideElement;
    };
    interface HTMLAppEditSlideAuthorElement extends Components.AppEditSlideAuthor, HTMLStencilElement {
    }
    var HTMLAppEditSlideAuthorElement: {
        prototype: HTMLAppEditSlideAuthorElement;
        new (): HTMLAppEditSlideAuthorElement;
    };
    interface HTMLAppEditSlideChartElement extends Components.AppEditSlideChart, HTMLStencilElement {
    }
    var HTMLAppEditSlideChartElement: {
        prototype: HTMLAppEditSlideChartElement;
        new (): HTMLAppEditSlideChartElement;
    };
    interface HTMLAppEditSlideQrcodeElement extends Components.AppEditSlideQrcode, HTMLStencilElement {
    }
    var HTMLAppEditSlideQrcodeElement: {
        prototype: HTMLAppEditSlideQrcodeElement;
        new (): HTMLAppEditSlideQrcodeElement;
    };
    interface HTMLAppEditSlideUserElement extends Components.AppEditSlideUser, HTMLStencilElement {
    }
    var HTMLAppEditSlideUserElement: {
        prototype: HTMLAppEditSlideUserElement;
        new (): HTMLAppEditSlideUserElement;
    };
    interface HTMLAppEditorElement extends Components.AppEditor, HTMLStencilElement {
    }
    var HTMLAppEditorElement: {
        prototype: HTMLAppEditorElement;
        new (): HTMLAppEditorElement;
    };
    interface HTMLAppElementAlignmentElement extends Components.AppElementAlignment, HTMLStencilElement {
    }
    var HTMLAppElementAlignmentElement: {
        prototype: HTMLAppElementAlignmentElement;
        new (): HTMLAppElementAlignmentElement;
    };
    interface HTMLAppElementStyleElement extends Components.AppElementStyle, HTMLStencilElement {
    }
    var HTMLAppElementStyleElement: {
        prototype: HTMLAppElementStyleElement;
        new (): HTMLAppElementStyleElement;
    };
    interface HTMLAppEmbedElement extends Components.AppEmbed, HTMLStencilElement {
    }
    var HTMLAppEmbedElement: {
        prototype: HTMLAppEmbedElement;
        new (): HTMLAppEmbedElement;
    };
    interface HTMLAppExpansionPanelElement extends Components.AppExpansionPanel, HTMLStencilElement {
    }
    var HTMLAppExpansionPanelElement: {
        prototype: HTMLAppExpansionPanelElement;
        new (): HTMLAppExpansionPanelElement;
    };
    interface HTMLAppFullscreenInfoElement extends Components.AppFullscreenInfo, HTMLStencilElement {
    }
    var HTMLAppFullscreenInfoElement: {
        prototype: HTMLAppFullscreenInfoElement;
        new (): HTMLAppFullscreenInfoElement;
    };
    interface HTMLAppGetHelpElement extends Components.AppGetHelp, HTMLStencilElement {
    }
    var HTMLAppGetHelpElement: {
        prototype: HTMLAppGetHelpElement;
        new (): HTMLAppGetHelpElement;
    };
    interface HTMLAppGifElement extends Components.AppGif, HTMLStencilElement {
    }
    var HTMLAppGifElement: {
        prototype: HTMLAppGifElement;
        new (): HTMLAppGifElement;
    };
    interface HTMLAppImageChoiceElement extends Components.AppImageChoice, HTMLStencilElement {
    }
    var HTMLAppImageChoiceElement: {
        prototype: HTMLAppImageChoiceElement;
        new (): HTMLAppImageChoiceElement;
    };
    interface HTMLAppImageElementElement extends Components.AppImageElement, HTMLStencilElement {
    }
    var HTMLAppImageElementElement: {
        prototype: HTMLAppImageElementElement;
        new (): HTMLAppImageElementElement;
    };
    interface HTMLAppImageHistoryElement extends Components.AppImageHistory, HTMLStencilElement {
    }
    var HTMLAppImageHistoryElement: {
        prototype: HTMLAppImageHistoryElement;
        new (): HTMLAppImageHistoryElement;
    };
    interface HTMLAppImageStyleElement extends Components.AppImageStyle, HTMLStencilElement {
    }
    var HTMLAppImageStyleElement: {
        prototype: HTMLAppImageStyleElement;
        new (): HTMLAppImageStyleElement;
    };
    interface HTMLAppLineWidthElement extends Components.AppLineWidth, HTMLStencilElement {
    }
    var HTMLAppLineWidthElement: {
        prototype: HTMLAppLineWidthElement;
        new (): HTMLAppLineWidthElement;
    };
    interface HTMLAppLinksElement extends Components.AppLinks, HTMLStencilElement {
    }
    var HTMLAppLinksElement: {
        prototype: HTMLAppLinksElement;
        new (): HTMLAppLinksElement;
    };
    interface HTMLAppListElement extends Components.AppList, HTMLStencilElement {
    }
    var HTMLAppListElement: {
        prototype: HTMLAppListElement;
        new (): HTMLAppListElement;
    };
    interface HTMLAppLogoElement extends Components.AppLogo, HTMLStencilElement {
    }
    var HTMLAppLogoElement: {
        prototype: HTMLAppLogoElement;
        new (): HTMLAppLogoElement;
    };
    interface HTMLAppMathElement extends Components.AppMath, HTMLStencilElement {
    }
    var HTMLAppMathElement: {
        prototype: HTMLAppMathElement;
        new (): HTMLAppMathElement;
    };
    interface HTMLAppMenuElement extends Components.AppMenu, HTMLStencilElement {
    }
    var HTMLAppMenuElement: {
        prototype: HTMLAppMenuElement;
        new (): HTMLAppMenuElement;
    };
    interface HTMLAppMoreDeckActionsElement extends Components.AppMoreDeckActions, HTMLStencilElement {
    }
    var HTMLAppMoreDeckActionsElement: {
        prototype: HTMLAppMoreDeckActionsElement;
        new (): HTMLAppMoreDeckActionsElement;
    };
    interface HTMLAppMoreElementActionsElement extends Components.AppMoreElementActions, HTMLStencilElement {
    }
    var HTMLAppMoreElementActionsElement: {
        prototype: HTMLAppMoreElementActionsElement;
        new (): HTMLAppMoreElementActionsElement;
    };
    interface HTMLAppMoreFileActionsElement extends Components.AppMoreFileActions, HTMLStencilElement {
    }
    var HTMLAppMoreFileActionsElement: {
        prototype: HTMLAppMoreFileActionsElement;
        new (): HTMLAppMoreFileActionsElement;
    };
    interface HTMLAppMoreShareOptionsElement extends Components.AppMoreShareOptions, HTMLStencilElement {
    }
    var HTMLAppMoreShareOptionsElement: {
        prototype: HTMLAppMoreShareOptionsElement;
        new (): HTMLAppMoreShareOptionsElement;
    };
    interface HTMLAppNavigationElement extends Components.AppNavigation, HTMLStencilElement {
    }
    var HTMLAppNavigationElement: {
        prototype: HTMLAppNavigationElement;
        new (): HTMLAppNavigationElement;
    };
    interface HTMLAppNavigationEndElement extends Components.AppNavigationEnd, HTMLStencilElement {
    }
    var HTMLAppNavigationEndElement: {
        prototype: HTMLAppNavigationEndElement;
        new (): HTMLAppNavigationEndElement;
    };
    interface HTMLAppNavigationStartElement extends Components.AppNavigationStart, HTMLStencilElement {
    }
    var HTMLAppNavigationStartElement: {
        prototype: HTMLAppNavigationStartElement;
        new (): HTMLAppNavigationStartElement;
    };
    interface HTMLAppNewElement extends Components.AppNew, HTMLStencilElement {
    }
    var HTMLAppNewElement: {
        prototype: HTMLAppNewElement;
        new (): HTMLAppNewElement;
    };
    interface HTMLAppNoTemplatesElement extends Components.AppNoTemplates, HTMLStencilElement {
    }
    var HTMLAppNoTemplatesElement: {
        prototype: HTMLAppNoTemplatesElement;
        new (): HTMLAppNoTemplatesElement;
    };
    interface HTMLAppNotesElement extends Components.AppNotes, HTMLStencilElement {
    }
    var HTMLAppNotesElement: {
        prototype: HTMLAppNotesElement;
        new (): HTMLAppNotesElement;
    };
    interface HTMLAppPlaygroundElement extends Components.AppPlayground, HTMLStencilElement {
    }
    var HTMLAppPlaygroundElement: {
        prototype: HTMLAppPlaygroundElement;
        new (): HTMLAppPlaygroundElement;
    };
    interface HTMLAppPlaygroundPlaceholderElement extends Components.AppPlaygroundPlaceholder, HTMLStencilElement {
    }
    var HTMLAppPlaygroundPlaceholderElement: {
        prototype: HTMLAppPlaygroundPlaceholderElement;
        new (): HTMLAppPlaygroundPlaceholderElement;
    };
    interface HTMLAppPollElement extends Components.AppPoll, HTMLStencilElement {
    }
    var HTMLAppPollElement: {
        prototype: HTMLAppPollElement;
        new (): HTMLAppPollElement;
    };
    interface HTMLAppPollOptionsElement extends Components.AppPollOptions, HTMLStencilElement {
    }
    var HTMLAppPollOptionsElement: {
        prototype: HTMLAppPollOptionsElement;
        new (): HTMLAppPollOptionsElement;
    };
    interface HTMLAppPopoverConfirmElement extends Components.AppPopoverConfirm, HTMLStencilElement {
    }
    var HTMLAppPopoverConfirmElement: {
        prototype: HTMLAppPopoverConfirmElement;
        new (): HTMLAppPopoverConfirmElement;
    };
    interface HTMLAppPresentElement extends Components.AppPresent, HTMLStencilElement {
    }
    var HTMLAppPresentElement: {
        prototype: HTMLAppPresentElement;
        new (): HTMLAppPresentElement;
    };
    interface HTMLAppProfileElement extends Components.AppProfile, HTMLStencilElement {
    }
    var HTMLAppProfileElement: {
        prototype: HTMLAppProfileElement;
        new (): HTMLAppProfileElement;
    };
    interface HTMLAppPublishElement extends Components.AppPublish, HTMLStencilElement {
    }
    var HTMLAppPublishElement: {
        prototype: HTMLAppPublishElement;
        new (): HTMLAppPublishElement;
    };
    interface HTMLAppPublishDoneElement extends Components.AppPublishDone, HTMLStencilElement {
    }
    var HTMLAppPublishDoneElement: {
        prototype: HTMLAppPublishDoneElement;
        new (): HTMLAppPublishDoneElement;
    };
    interface HTMLAppPublishEditElement extends Components.AppPublishEdit, HTMLStencilElement {
    }
    var HTMLAppPublishEditElement: {
        prototype: HTMLAppPublishEditElement;
        new (): HTMLAppPublishEditElement;
    };
    interface HTMLAppPublishTagsElement extends Components.AppPublishTags, HTMLStencilElement {
    }
    var HTMLAppPublishTagsElement: {
        prototype: HTMLAppPublishTagsElement;
        new (): HTMLAppPublishTagsElement;
    };
    interface HTMLAppRandomGifElement extends Components.AppRandomGif, HTMLStencilElement {
    }
    var HTMLAppRandomGifElement: {
        prototype: HTMLAppRandomGifElement;
        new (): HTMLAppRandomGifElement;
    };
    interface HTMLAppRemoteConnectElement extends Components.AppRemoteConnect, HTMLStencilElement {
    }
    var HTMLAppRemoteConnectElement: {
        prototype: HTMLAppRemoteConnectElement;
        new (): HTMLAppRemoteConnectElement;
    };
    interface HTMLAppRemoteRequestElement extends Components.AppRemoteRequest, HTMLStencilElement {
    }
    var HTMLAppRemoteRequestElement: {
        prototype: HTMLAppRemoteRequestElement;
        new (): HTMLAppRemoteRequestElement;
    };
    interface HTMLAppRevealElement extends Components.AppReveal, HTMLStencilElement {
    }
    var HTMLAppRevealElement: {
        prototype: HTMLAppRevealElement;
        new (): HTMLAppRevealElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLAppSelectTargetElementElement extends Components.AppSelectTargetElement, HTMLStencilElement {
    }
    var HTMLAppSelectTargetElementElement: {
        prototype: HTMLAppSelectTargetElementElement;
        new (): HTMLAppSelectTargetElementElement;
    };
    interface HTMLAppShapeElement extends Components.AppShape, HTMLStencilElement {
    }
    var HTMLAppShapeElement: {
        prototype: HTMLAppShapeElement;
        new (): HTMLAppShapeElement;
    };
    interface HTMLAppShareElement extends Components.AppShare, HTMLStencilElement {
    }
    var HTMLAppShareElement: {
        prototype: HTMLAppShareElement;
        new (): HTMLAppShareElement;
    };
    interface HTMLAppShareOptionsElement extends Components.AppShareOptions, HTMLStencilElement {
    }
    var HTMLAppShareOptionsElement: {
        prototype: HTMLAppShareOptionsElement;
        new (): HTMLAppShareOptionsElement;
    };
    interface HTMLAppSigninElement extends Components.AppSignin, HTMLStencilElement {
    }
    var HTMLAppSigninElement: {
        prototype: HTMLAppSigninElement;
        new (): HTMLAppSigninElement;
    };
    interface HTMLAppSigninPageElement extends Components.AppSigninPage, HTMLStencilElement {
    }
    var HTMLAppSigninPageElement: {
        prototype: HTMLAppSigninPageElement;
        new (): HTMLAppSigninPageElement;
    };
    interface HTMLAppSlideNavigateElement extends Components.AppSlideNavigate, HTMLStencilElement {
    }
    var HTMLAppSlideNavigateElement: {
        prototype: HTMLAppSlideNavigateElement;
        new (): HTMLAppSlideNavigateElement;
    };
    interface HTMLAppSlidePreviewElement extends Components.AppSlidePreview, HTMLStencilElement {
    }
    var HTMLAppSlidePreviewElement: {
        prototype: HTMLAppSlidePreviewElement;
        new (): HTMLAppSlidePreviewElement;
    };
    interface HTMLAppSlideThumbnailElement extends Components.AppSlideThumbnail, HTMLStencilElement {
    }
    var HTMLAppSlideThumbnailElement: {
        prototype: HTMLAppSlideThumbnailElement;
        new (): HTMLAppSlideThumbnailElement;
    };
    interface HTMLAppSlideWarningElement extends Components.AppSlideWarning, HTMLStencilElement {
    }
    var HTMLAppSlideWarningElement: {
        prototype: HTMLAppSlideWarningElement;
        new (): HTMLAppSlideWarningElement;
    };
    interface HTMLAppSlideWarningInfoElement extends Components.AppSlideWarningInfo, HTMLStencilElement {
    }
    var HTMLAppSlideWarningInfoElement: {
        prototype: HTMLAppSlideWarningInfoElement;
        new (): HTMLAppSlideWarningInfoElement;
    };
    interface HTMLAppSlidesAsideElement extends Components.AppSlidesAside, HTMLStencilElement {
    }
    var HTMLAppSlidesAsideElement: {
        prototype: HTMLAppSlidesAsideElement;
        new (): HTMLAppSlidesAsideElement;
    };
    interface HTMLAppSlotTypeElement extends Components.AppSlotType, HTMLStencilElement {
    }
    var HTMLAppSlotTypeElement: {
        prototype: HTMLAppSlotTypeElement;
        new (): HTMLAppSlotTypeElement;
    };
    interface HTMLAppSpinnerElement extends Components.AppSpinner, HTMLStencilElement {
    }
    var HTMLAppSpinnerElement: {
        prototype: HTMLAppSpinnerElement;
        new (): HTMLAppSpinnerElement;
    };
    interface HTMLAppStackingOrderElement extends Components.AppStackingOrder, HTMLStencilElement {
    }
    var HTMLAppStackingOrderElement: {
        prototype: HTMLAppStackingOrderElement;
        new (): HTMLAppStackingOrderElement;
    };
    interface HTMLAppStorageElement extends Components.AppStorage, HTMLStencilElement {
    }
    var HTMLAppStorageElement: {
        prototype: HTMLAppStorageElement;
        new (): HTMLAppStorageElement;
    };
    interface HTMLAppStorageAdminElement extends Components.AppStorageAdmin, HTMLStencilElement {
    }
    var HTMLAppStorageAdminElement: {
        prototype: HTMLAppStorageAdminElement;
        new (): HTMLAppStorageAdminElement;
    };
    interface HTMLAppStorageDataElement extends Components.AppStorageData, HTMLStencilElement {
    }
    var HTMLAppStorageDataElement: {
        prototype: HTMLAppStorageDataElement;
        new (): HTMLAppStorageDataElement;
    };
    interface HTMLAppStorageFilesElement extends Components.AppStorageFiles, HTMLStencilElement {
    }
    var HTMLAppStorageFilesElement: {
        prototype: HTMLAppStorageFilesElement;
        new (): HTMLAppStorageFilesElement;
    };
    interface HTMLAppStorageImagesElement extends Components.AppStorageImages, HTMLStencilElement {
    }
    var HTMLAppStorageImagesElement: {
        prototype: HTMLAppStorageImagesElement;
        new (): HTMLAppStorageImagesElement;
    };
    interface HTMLAppStrokeWidthElement extends Components.AppStrokeWidth, HTMLStencilElement {
    }
    var HTMLAppStrokeWidthElement: {
        prototype: HTMLAppStrokeWidthElement;
        new (): HTMLAppStrokeWidthElement;
    };
    interface HTMLAppSyncInfoElement extends Components.AppSyncInfo, HTMLStencilElement {
    }
    var HTMLAppSyncInfoElement: {
        prototype: HTMLAppSyncInfoElement;
        new (): HTMLAppSyncInfoElement;
    };
    interface HTMLAppTemplateElement extends Components.AppTemplate, HTMLStencilElement {
    }
    var HTMLAppTemplateElement: {
        prototype: HTMLAppTemplateElement;
        new (): HTMLAppTemplateElement;
    };
    interface HTMLAppTemplateShowcaseElement extends Components.AppTemplateShowcase, HTMLStencilElement {
    }
    var HTMLAppTemplateShowcaseElement: {
        prototype: HTMLAppTemplateShowcaseElement;
        new (): HTMLAppTemplateShowcaseElement;
    };
    interface HTMLAppTemplatesElement extends Components.AppTemplates, HTMLStencilElement {
    }
    var HTMLAppTemplatesElement: {
        prototype: HTMLAppTemplatesElement;
        new (): HTMLAppTemplatesElement;
    };
    interface HTMLAppTemplatesChartsElement extends Components.AppTemplatesCharts, HTMLStencilElement {
    }
    var HTMLAppTemplatesChartsElement: {
        prototype: HTMLAppTemplatesChartsElement;
        new (): HTMLAppTemplatesChartsElement;
    };
    interface HTMLAppTemplatesCommunityElement extends Components.AppTemplatesCommunity, HTMLStencilElement {
    }
    var HTMLAppTemplatesCommunityElement: {
        prototype: HTMLAppTemplatesCommunityElement;
        new (): HTMLAppTemplatesCommunityElement;
    };
    interface HTMLAppTemplatesContentElement extends Components.AppTemplatesContent, HTMLStencilElement {
    }
    var HTMLAppTemplatesContentElement: {
        prototype: HTMLAppTemplatesContentElement;
        new (): HTMLAppTemplatesContentElement;
    };
    interface HTMLAppTemplatesDefaultElement extends Components.AppTemplatesDefault, HTMLStencilElement {
    }
    var HTMLAppTemplatesDefaultElement: {
        prototype: HTMLAppTemplatesDefaultElement;
        new (): HTMLAppTemplatesDefaultElement;
    };
    interface HTMLAppTemplatesSplitElement extends Components.AppTemplatesSplit, HTMLStencilElement {
    }
    var HTMLAppTemplatesSplitElement: {
        prototype: HTMLAppTemplatesSplitElement;
        new (): HTMLAppTemplatesSplitElement;
    };
    interface HTMLAppTemplatesTitleElement extends Components.AppTemplatesTitle, HTMLStencilElement {
    }
    var HTMLAppTemplatesTitleElement: {
        prototype: HTMLAppTemplatesTitleElement;
        new (): HTMLAppTemplatesTitleElement;
    };
    interface HTMLAppTemplatesUserElement extends Components.AppTemplatesUser, HTMLStencilElement {
    }
    var HTMLAppTemplatesUserElement: {
        prototype: HTMLAppTemplatesUserElement;
        new (): HTMLAppTemplatesUserElement;
    };
    interface HTMLAppTextElement extends Components.AppText, HTMLStencilElement {
    }
    var HTMLAppTextElement: {
        prototype: HTMLAppTextElement;
        new (): HTMLAppTextElement;
    };
    interface HTMLAppTextChartElement extends Components.AppTextChart, HTMLStencilElement {
    }
    var HTMLAppTextChartElement: {
        prototype: HTMLAppTextChartElement;
        new (): HTMLAppTextChartElement;
    };
    interface HTMLAppTransformElementElement extends Components.AppTransformElement, HTMLStencilElement {
    }
    var HTMLAppTransformElementElement: {
        prototype: HTMLAppTransformElementElement;
        new (): HTMLAppTransformElementElement;
    };
    interface HTMLAppTransformParagraphElement extends Components.AppTransformParagraph, HTMLStencilElement {
    }
    var HTMLAppTransformParagraphElement: {
        prototype: HTMLAppTransformParagraphElement;
        new (): HTMLAppTransformParagraphElement;
    };
    interface HTMLAppTransformSlideElement extends Components.AppTransformSlide, HTMLStencilElement {
    }
    var HTMLAppTransformSlideElement: {
        prototype: HTMLAppTransformSlideElement;
        new (): HTMLAppTransformSlideElement;
    };
    interface HTMLAppUnpublishElement extends Components.AppUnpublish, HTMLStencilElement {
    }
    var HTMLAppUnpublishElement: {
        prototype: HTMLAppUnpublishElement;
        new (): HTMLAppUnpublishElement;
    };
    interface HTMLAppUnsplashElement extends Components.AppUnsplash, HTMLStencilElement {
    }
    var HTMLAppUnsplashElement: {
        prototype: HTMLAppUnsplashElement;
        new (): HTMLAppUnsplashElement;
    };
    interface HTMLAppUserDeleteElement extends Components.AppUserDelete, HTMLStencilElement {
    }
    var HTMLAppUserDeleteElement: {
        prototype: HTMLAppUserDeleteElement;
        new (): HTMLAppUserDeleteElement;
    };
    interface HTMLAppUserInfoElement extends Components.AppUserInfo, HTMLStencilElement {
    }
    var HTMLAppUserInfoElement: {
        prototype: HTMLAppUserInfoElement;
        new (): HTMLAppUserInfoElement;
    };
    interface HTMLAppUserMenuElement extends Components.AppUserMenu, HTMLStencilElement {
    }
    var HTMLAppUserMenuElement: {
        prototype: HTMLAppUserMenuElement;
        new (): HTMLAppUserMenuElement;
    };
    interface HTMLAppWavesElement extends Components.AppWaves, HTMLStencilElement {
    }
    var HTMLAppWavesElement: {
        prototype: HTMLAppWavesElement;
        new (): HTMLAppWavesElement;
    };
    interface HTMLAppYoutubeElement extends Components.AppYoutube, HTMLStencilElement {
    }
    var HTMLAppYoutubeElement: {
        prototype: HTMLAppYoutubeElement;
        new (): HTMLAppYoutubeElement;
    };
    interface HTMLDeckdeckgoLineElement extends Components.DeckdeckgoLine, HTMLStencilElement {
    }
    var HTMLDeckdeckgoLineElement: {
        prototype: HTMLDeckdeckgoLineElement;
        new (): HTMLDeckdeckgoLineElement;
    };
    interface HTMLDeckdeckgoLineElbowElement extends Components.DeckdeckgoLineElbow, HTMLStencilElement {
    }
    var HTMLDeckdeckgoLineElbowElement: {
        prototype: HTMLDeckdeckgoLineElbowElement;
        new (): HTMLDeckdeckgoLineElbowElement;
    };
    interface HTMLDeckgoCustomBarChartElement extends Components.DeckgoCustomBarChart, HTMLStencilElement {
    }
    var HTMLDeckgoCustomBarChartElement: {
        prototype: HTMLDeckgoCustomBarChartElement;
        new (): HTMLDeckgoCustomBarChartElement;
    };
    interface HTMLDeckgoCustomHorizontalBarChartElement extends Components.DeckgoCustomHorizontalBarChart, HTMLStencilElement {
    }
    var HTMLDeckgoCustomHorizontalBarChartElement: {
        prototype: HTMLDeckgoCustomHorizontalBarChartElement;
        new (): HTMLDeckgoCustomHorizontalBarChartElement;
    };
    interface HTMLDeckgoCustomIeActionButtonElement extends Components.DeckgoCustomIeActionButton, HTMLStencilElement {
    }
    var HTMLDeckgoCustomIeActionButtonElement: {
        prototype: HTMLDeckgoCustomIeActionButtonElement;
        new (): HTMLDeckgoCustomIeActionButtonElement;
    };
    interface HTMLDeckgoCustomIeActionImageElement extends Components.DeckgoCustomIeActionImage, HTMLStencilElement {
    }
    var HTMLDeckgoCustomIeActionImageElement: {
        prototype: HTMLDeckgoCustomIeActionImageElement;
        new (): HTMLDeckgoCustomIeActionImageElement;
    };
    interface HTMLDeckgoCustomIeAlignActionsElement extends Components.DeckgoCustomIeAlignActions, HTMLStencilElement {
    }
    var HTMLDeckgoCustomIeAlignActionsElement: {
        prototype: HTMLDeckgoCustomIeAlignActionsElement;
        new (): HTMLDeckgoCustomIeAlignActionsElement;
    };
    interface HTMLDeckgoCustomIeColorActionsElement extends Components.DeckgoCustomIeColorActions, HTMLStencilElement {
    }
    var HTMLDeckgoCustomIeColorActionsElement: {
        prototype: HTMLDeckgoCustomIeColorActionsElement;
        new (): HTMLDeckgoCustomIeColorActionsElement;
    };
    interface HTMLDeckgoCustomIeFontSizeActionsElement extends Components.DeckgoCustomIeFontSizeActions, HTMLStencilElement {
    }
    var HTMLDeckgoCustomIeFontSizeActionsElement: {
        prototype: HTMLDeckgoCustomIeFontSizeActionsElement;
        new (): HTMLDeckgoCustomIeFontSizeActionsElement;
    };
    interface HTMLDeckgoCustomIeImageActionsElement extends Components.DeckgoCustomIeImageActions, HTMLStencilElement {
    }
    var HTMLDeckgoCustomIeImageActionsElement: {
        prototype: HTMLDeckgoCustomIeImageActionsElement;
        new (): HTMLDeckgoCustomIeImageActionsElement;
    };
    interface HTMLDeckgoCustomIeLinkActionsElement extends Components.DeckgoCustomIeLinkActions, HTMLStencilElement {
    }
    var HTMLDeckgoCustomIeLinkActionsElement: {
        prototype: HTMLDeckgoCustomIeLinkActionsElement;
        new (): HTMLDeckgoCustomIeLinkActionsElement;
    };
    interface HTMLDeckgoCustomIeListActionsElement extends Components.DeckgoCustomIeListActions, HTMLStencilElement {
    }
    var HTMLDeckgoCustomIeListActionsElement: {
        prototype: HTMLDeckgoCustomIeListActionsElement;
        new (): HTMLDeckgoCustomIeListActionsElement;
    };
    interface HTMLDeckgoCustomIeSeparatorElement extends Components.DeckgoCustomIeSeparator, HTMLStencilElement {
    }
    var HTMLDeckgoCustomIeSeparatorElement: {
        prototype: HTMLDeckgoCustomIeSeparatorElement;
        new (): HTMLDeckgoCustomIeSeparatorElement;
    };
    interface HTMLDeckgoCustomIeStyleActionsElement extends Components.DeckgoCustomIeStyleActions, HTMLStencilElement {
    }
    var HTMLDeckgoCustomIeStyleActionsElement: {
        prototype: HTMLDeckgoCustomIeStyleActionsElement;
        new (): HTMLDeckgoCustomIeStyleActionsElement;
    };
    interface HTMLDeckgoCustomIeTriangleElement extends Components.DeckgoCustomIeTriangle, HTMLStencilElement {
    }
    var HTMLDeckgoCustomIeTriangleElement: {
        prototype: HTMLDeckgoCustomIeTriangleElement;
        new (): HTMLDeckgoCustomIeTriangleElement;
    };
    interface HTMLDeckgoCustomInlineEditorElement extends Components.DeckgoCustomInlineEditor, HTMLStencilElement {
    }
    var HTMLDeckgoCustomInlineEditorElement: {
        prototype: HTMLDeckgoCustomInlineEditorElement;
        new (): HTMLDeckgoCustomInlineEditorElement;
    };
    interface HTMLDeckgoCustomLineChartElement extends Components.DeckgoCustomLineChart, HTMLStencilElement {
    }
    var HTMLDeckgoCustomLineChartElement: {
        prototype: HTMLDeckgoCustomLineChartElement;
        new (): HTMLDeckgoCustomLineChartElement;
    };
    interface HTMLDeckgoCustomPieChartElement extends Components.DeckgoCustomPieChart, HTMLStencilElement {
    }
    var HTMLDeckgoCustomPieChartElement: {
        prototype: HTMLDeckgoCustomPieChartElement;
        new (): HTMLDeckgoCustomPieChartElement;
    };
    interface HTMLDeckgoDrrTextElement extends Components.DeckgoDrrText, HTMLStencilElement {
    }
    var HTMLDeckgoDrrTextElement: {
        prototype: HTMLDeckgoDrrTextElement;
        new (): HTMLDeckgoDrrTextElement;
    };
    interface HTMLDeckgoIeFontFamilyActionsElement extends Components.DeckgoIeFontFamilyActions, HTMLStencilElement {
    }
    var HTMLDeckgoIeFontFamilyActionsElement: {
        prototype: HTMLDeckgoIeFontFamilyActionsElement;
        new (): HTMLDeckgoIeFontFamilyActionsElement;
    };
    interface HTMLDeckgoSlideChartCustomElement extends Components.DeckgoSlideChartCustom, HTMLStencilElement {
    }
    var HTMLDeckgoSlideChartCustomElement: {
        prototype: HTMLDeckgoSlideChartCustomElement;
        new (): HTMLDeckgoSlideChartCustomElement;
    };
    interface HTMLElementTagNameMap {
        "app-404": HTMLApp404Element;
        "app-action-add-slide": HTMLAppActionAddSlideElement;
        "app-action-busy": HTMLAppActionBusyElement;
        "app-action-help": HTMLAppActionHelpElement;
        "app-action-share": HTMLAppActionShareElement;
        "app-actions-deck": HTMLAppActionsDeckElement;
        "app-actions-deck-editor": HTMLAppActionsDeckEditorElement;
        "app-actions-element": HTMLAppActionsElementElement;
        "app-add-paragraph": HTMLAppAddParagraphElement;
        "app-arrow": HTMLAppArrowElement;
        "app-asset-data": HTMLAppAssetDataElement;
        "app-asset-image": HTMLAppAssetImageElement;
        "app-avatar": HTMLAppAvatarElement;
        "app-block": HTMLAppBlockElement;
        "app-block-chart": HTMLAppBlockChartElement;
        "app-border-color": HTMLAppBorderColorElement;
        "app-border-radius": HTMLAppBorderRadiusElement;
        "app-bottom-sheet": HTMLAppBottomSheetElement;
        "app-box-shadow": HTMLAppBoxShadowElement;
        "app-breadcrumbs": HTMLAppBreadcrumbsElement;
        "app-close-menu": HTMLAppCloseMenuElement;
        "app-cloud-wait": HTMLAppCloudWaitElement;
        "app-code": HTMLAppCodeElement;
        "app-code-languages": HTMLAppCodeLanguagesElement;
        "app-color": HTMLAppColorElement;
        "app-color-chart": HTMLAppColorChartElement;
        "app-color-code": HTMLAppColorCodeElement;
        "app-color-fill-stroke": HTMLAppColorFillStrokeElement;
        "app-color-line": HTMLAppColorLineElement;
        "app-color-qrcode": HTMLAppColorQrcodeElement;
        "app-color-sides": HTMLAppColorSidesElement;
        "app-color-text-background": HTMLAppColorTextBackgroundElement;
        "app-color-word-cloud": HTMLAppColorWordCloudElement;
        "app-copy-style": HTMLAppCopyStyleElement;
        "app-create-slide": HTMLAppCreateSlideElement;
        "app-customization": HTMLAppCustomizationElement;
        "app-dashboard-actions": HTMLAppDashboardActionsElement;
        "app-deck-editor": HTMLAppDeckEditorElement;
        "app-deck-fonts": HTMLAppDeckFontsElement;
        "app-deck-header-footer": HTMLAppDeckHeaderFooterElement;
        "app-deck-pagenumber": HTMLAppDeckPagenumberElement;
        "app-deck-style": HTMLAppDeckStyleElement;
        "app-deck-transition": HTMLAppDeckTransitionElement;
        "app-decks": HTMLAppDecksElement;
        "app-delete": HTMLAppDeleteElement;
        "app-demo": HTMLAppDemoElement;
        "app-doc-editor": HTMLAppDocEditorElement;
        "app-doc-indicator": HTMLAppDocIndicatorElement;
        "app-docs": HTMLAppDocsElement;
        "app-edit-mode": HTMLAppEditModeElement;
        "app-edit-slide": HTMLAppEditSlideElement;
        "app-edit-slide-author": HTMLAppEditSlideAuthorElement;
        "app-edit-slide-chart": HTMLAppEditSlideChartElement;
        "app-edit-slide-qrcode": HTMLAppEditSlideQrcodeElement;
        "app-edit-slide-user": HTMLAppEditSlideUserElement;
        "app-editor": HTMLAppEditorElement;
        "app-element-alignment": HTMLAppElementAlignmentElement;
        "app-element-style": HTMLAppElementStyleElement;
        "app-embed": HTMLAppEmbedElement;
        "app-expansion-panel": HTMLAppExpansionPanelElement;
        "app-fullscreen-info": HTMLAppFullscreenInfoElement;
        "app-get-help": HTMLAppGetHelpElement;
        "app-gif": HTMLAppGifElement;
        "app-image-choice": HTMLAppImageChoiceElement;
        "app-image-element": HTMLAppImageElementElement;
        "app-image-history": HTMLAppImageHistoryElement;
        "app-image-style": HTMLAppImageStyleElement;
        "app-line-width": HTMLAppLineWidthElement;
        "app-links": HTMLAppLinksElement;
        "app-list": HTMLAppListElement;
        "app-logo": HTMLAppLogoElement;
        "app-math": HTMLAppMathElement;
        "app-menu": HTMLAppMenuElement;
        "app-more-deck-actions": HTMLAppMoreDeckActionsElement;
        "app-more-element-actions": HTMLAppMoreElementActionsElement;
        "app-more-file-actions": HTMLAppMoreFileActionsElement;
        "app-more-share-options": HTMLAppMoreShareOptionsElement;
        "app-navigation": HTMLAppNavigationElement;
        "app-navigation-end": HTMLAppNavigationEndElement;
        "app-navigation-start": HTMLAppNavigationStartElement;
        "app-new": HTMLAppNewElement;
        "app-no-templates": HTMLAppNoTemplatesElement;
        "app-notes": HTMLAppNotesElement;
        "app-playground": HTMLAppPlaygroundElement;
        "app-playground-placeholder": HTMLAppPlaygroundPlaceholderElement;
        "app-poll": HTMLAppPollElement;
        "app-poll-options": HTMLAppPollOptionsElement;
        "app-popover-confirm": HTMLAppPopoverConfirmElement;
        "app-present": HTMLAppPresentElement;
        "app-profile": HTMLAppProfileElement;
        "app-publish": HTMLAppPublishElement;
        "app-publish-done": HTMLAppPublishDoneElement;
        "app-publish-edit": HTMLAppPublishEditElement;
        "app-publish-tags": HTMLAppPublishTagsElement;
        "app-random-gif": HTMLAppRandomGifElement;
        "app-remote-connect": HTMLAppRemoteConnectElement;
        "app-remote-request": HTMLAppRemoteRequestElement;
        "app-reveal": HTMLAppRevealElement;
        "app-root": HTMLAppRootElement;
        "app-select-target-element": HTMLAppSelectTargetElementElement;
        "app-shape": HTMLAppShapeElement;
        "app-share": HTMLAppShareElement;
        "app-share-options": HTMLAppShareOptionsElement;
        "app-signin": HTMLAppSigninElement;
        "app-signin-page": HTMLAppSigninPageElement;
        "app-slide-navigate": HTMLAppSlideNavigateElement;
        "app-slide-preview": HTMLAppSlidePreviewElement;
        "app-slide-thumbnail": HTMLAppSlideThumbnailElement;
        "app-slide-warning": HTMLAppSlideWarningElement;
        "app-slide-warning-info": HTMLAppSlideWarningInfoElement;
        "app-slides-aside": HTMLAppSlidesAsideElement;
        "app-slot-type": HTMLAppSlotTypeElement;
        "app-spinner": HTMLAppSpinnerElement;
        "app-stacking-order": HTMLAppStackingOrderElement;
        "app-storage": HTMLAppStorageElement;
        "app-storage-admin": HTMLAppStorageAdminElement;
        "app-storage-data": HTMLAppStorageDataElement;
        "app-storage-files": HTMLAppStorageFilesElement;
        "app-storage-images": HTMLAppStorageImagesElement;
        "app-stroke-width": HTMLAppStrokeWidthElement;
        "app-sync-info": HTMLAppSyncInfoElement;
        "app-template": HTMLAppTemplateElement;
        "app-template-showcase": HTMLAppTemplateShowcaseElement;
        "app-templates": HTMLAppTemplatesElement;
        "app-templates-charts": HTMLAppTemplatesChartsElement;
        "app-templates-community": HTMLAppTemplatesCommunityElement;
        "app-templates-content": HTMLAppTemplatesContentElement;
        "app-templates-default": HTMLAppTemplatesDefaultElement;
        "app-templates-split": HTMLAppTemplatesSplitElement;
        "app-templates-title": HTMLAppTemplatesTitleElement;
        "app-templates-user": HTMLAppTemplatesUserElement;
        "app-text": HTMLAppTextElement;
        "app-text-chart": HTMLAppTextChartElement;
        "app-transform-element": HTMLAppTransformElementElement;
        "app-transform-paragraph": HTMLAppTransformParagraphElement;
        "app-transform-slide": HTMLAppTransformSlideElement;
        "app-unpublish": HTMLAppUnpublishElement;
        "app-unsplash": HTMLAppUnsplashElement;
        "app-user-delete": HTMLAppUserDeleteElement;
        "app-user-info": HTMLAppUserInfoElement;
        "app-user-menu": HTMLAppUserMenuElement;
        "app-waves": HTMLAppWavesElement;
        "app-youtube": HTMLAppYoutubeElement;
        "deckdeckgo-line": HTMLDeckdeckgoLineElement;
        "deckdeckgo-line-elbow": HTMLDeckdeckgoLineElbowElement;
        "deckgo-custom-bar-chart": HTMLDeckgoCustomBarChartElement;
        "deckgo-custom-horizontal-bar-chart": HTMLDeckgoCustomHorizontalBarChartElement;
        "deckgo-custom-ie-action-button": HTMLDeckgoCustomIeActionButtonElement;
        "deckgo-custom-ie-action-image": HTMLDeckgoCustomIeActionImageElement;
        "deckgo-custom-ie-align-actions": HTMLDeckgoCustomIeAlignActionsElement;
        "deckgo-custom-ie-color-actions": HTMLDeckgoCustomIeColorActionsElement;
        "deckgo-custom-ie-font-size-actions": HTMLDeckgoCustomIeFontSizeActionsElement;
        "deckgo-custom-ie-image-actions": HTMLDeckgoCustomIeImageActionsElement;
        "deckgo-custom-ie-link-actions": HTMLDeckgoCustomIeLinkActionsElement;
        "deckgo-custom-ie-list-actions": HTMLDeckgoCustomIeListActionsElement;
        "deckgo-custom-ie-separator": HTMLDeckgoCustomIeSeparatorElement;
        "deckgo-custom-ie-style-actions": HTMLDeckgoCustomIeStyleActionsElement;
        "deckgo-custom-ie-triangle": HTMLDeckgoCustomIeTriangleElement;
        "deckgo-custom-inline-editor": HTMLDeckgoCustomInlineEditorElement;
        "deckgo-custom-line-chart": HTMLDeckgoCustomLineChartElement;
        "deckgo-custom-pie-chart": HTMLDeckgoCustomPieChartElement;
        "deckgo-drr-text": HTMLDeckgoDrrTextElement;
        "deckgo-ie-font-family-actions": HTMLDeckgoIeFontFamilyActionsElement;
        "deckgo-slide-chart-custom": HTMLDeckgoSlideChartCustomElement;
    }
}
declare namespace LocalJSX {
    interface App404 {
    }
    interface AppActionAddSlide {
        "currentSlideIndex"?: number;
        "onAddSlide"?: (event: CustomEvent<JSX.IntrinsicElements>) => void;
        "onBlockSlide"?: (event: CustomEvent<boolean>) => void;
        "popoverCssClass"?: string;
        "slidesLength"?: number | undefined;
    }
    interface AppActionBusy {
        "iconName"?: string;
        "onActionReady"?: (event: CustomEvent<UIEvent>) => void;
    }
    interface AppActionHelp {
        "link"?: boolean;
        "onHelpSelected"?: (event: CustomEvent<void>) => void;
    }
    interface AppActionShare {
        "onActionPublish"?: (event: CustomEvent<void>) => void;
        "onOpenEmbed"?: (event: CustomEvent<void>) => void;
    }
    interface AppActionsDeck {
        "animatePrevNextSlide"?: EventEmitter;
        "deckDidChange"?: EventEmitter;
        "fullscreen"?: boolean;
        "onSelectDeck"?: (event: CustomEvent<void>) => void;
        "onStepTo"?: (event: CustomEvent<HTMLElement | undefined>) => void;
        "slideNumber"?: number;
        "slides"?: JSX.IntrinsicElements[];
        "toggleFullScreen"?: EventEmitter;
    }
    interface AppActionsDeckEditor {
        "fullscreen"?: boolean;
        "hideActions"?: boolean;
        "onAnimatePrevNextSlide"?: (event: CustomEvent<boolean>) => void;
        "onBlockSlide"?: (event: CustomEvent<boolean>) => void;
        "onDeckDidChange"?: (event: CustomEvent<HTMLElement>) => void;
        "onElementFocus"?: (event: CustomEvent<HTMLElement>) => void;
        "onPresenting"?: (event: CustomEvent<boolean>) => void;
        "onSlideCopy"?: (event: CustomEvent<HTMLElement>) => void;
        "onSlideTransform"?: (event: CustomEvent<JSX.IntrinsicElements>) => void;
        "onToggleFullScreen"?: (event: CustomEvent<void>) => void;
        "slideNumber"?: number;
        "slides"?: JSX.IntrinsicElements[];
    }
    interface AppActionsElement {
        "activeSlide"?: JSX.IntrinsicElements;
        "elementFocus"?: EventEmitter;
        "onBlockSlide"?: (event: CustomEvent<boolean>) => void;
        "onCodeDidChange"?: (event: CustomEvent<HTMLElement>) => void;
        "onImgDidChange"?: (event: CustomEvent<HTMLElement>) => void;
        "onMathDidChange"?: (event: CustomEvent<HTMLElement>) => void;
        "onNotesDidChange"?: (event: CustomEvent<HTMLElement>) => void;
        "onResetted"?: (event: CustomEvent<void>) => void;
        "onSignIn"?: (event: CustomEvent<void>) => void;
        "onSlideDelete"?: (event: CustomEvent<HTMLElement>) => void;
        "onSlideDidChange"?: (event: CustomEvent<HTMLElement>) => void;
        "slideCopy"?: EventEmitter;
        "slideTransform"?: EventEmitter;
    }
    interface AppAddParagraph {
        "containerRef"?: HTMLElement | undefined;
        "onSelectParagraph"?: (event: CustomEvent<HTMLElement | undefined>) => void;
    }
    interface AppArrow {
        "onArrowChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppAssetData {
        "data": StorageFile;
    }
    interface AppAssetImage {
        "image": UnsplashPhoto | TenorGif | StorageFile | Waves | TenorCategory;
    }
    interface AppAvatar {
        "ariaLabel"?: string;
        "src"?: string;
    }
    interface AppBlock {
        "onBlockChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: SelectedElement;
    }
    interface AppBlockChart {
        "onBlockChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppBorderColor {
        "onBorderDidChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: SelectedElement;
    }
    interface AppBorderRadius {
        "onBorderRadiusDidChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: SelectedElement;
    }
    interface AppBottomSheet {
        "onSheetChanged"?: (event: CustomEvent<'open' | 'close'>) => void;
    }
    interface AppBoxShadow {
        "onBoxShadowDidChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: SelectedElement;
    }
    interface AppBreadcrumbs {
        "onStepTo"?: (event: CustomEvent<HTMLElement | undefined>) => void;
        "slideNumber"?: number;
    }
    interface AppCloseMenu {
        "onClose"?: (event: CustomEvent<void>) => void;
    }
    interface AppCloudWait {
    }
    interface AppCode {
        "codeDidChange"?: EventEmitter<HTMLElement>;
        "selectedElement"?: HTMLElement;
    }
    interface AppCodeLanguages {
        "codeDidChange"?: EventEmitter<HTMLElement>;
        "currentLanguage"?: PrismLanguage | undefined;
        "selectedElement"?: HTMLElement;
    }
    interface AppColor {
        "defaultColor"?: string;
        "initColor"?: () => Promise<InitStyleColor>;
        "onColorDidChange"?: (event: CustomEvent<string>) => void;
        "onResetColor"?: (event: CustomEvent<void>) => void;
    }
    interface AppColorChart {
        "onColorChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppColorCode {
        "onCodeDidChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppColorFillStroke {
        "colorType"?: 'fill' | 'stroke';
        "deck"?: boolean;
        "onColorChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
        "slide"?: boolean;
    }
    interface AppColorLine {
        "onColorChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppColorQrcode {
        "onColorChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppColorSides {
        "onColorChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
        "template"?: 'split' | 'author';
    }
    interface AppColorTextBackground {
        "colorType"?: 'text' | 'background';
        "deck"?: boolean;
        "onColorChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
        "slide"?: boolean;
    }
    interface AppColorWordCloud {
        "onWordCloudDidChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppCopyStyle {
        "selectedElement"?: HTMLElement;
    }
    interface AppCreateSlide {
        "currentSlideIndex"?: number;
        "onSignIn"?: (event: CustomEvent<void>) => void;
    }
    interface AppCustomization {
    }
    interface AppDashboardActions {
        "data"?: DeckOrDoc;
        "disableDelete"?: boolean;
        "onCloned"?: (event: CustomEvent<void>) => void;
        "onDeleted"?: (event: CustomEvent<string>) => void;
    }
    interface AppDeckEditor {
        "onSlideConcat"?: (event: CustomEvent<{
		slideId: string;
		extraSlide: JSX.IntrinsicElements;
	}>) => void;
        "onStyleDidChange"?: (event: CustomEvent<HTMLElement>) => void;
    }
    interface AppDeckFonts {
        "deckElement"?: HTMLElement;
        "onFontsChange"?: (event: CustomEvent<void>) => void;
    }
    interface AppDeckHeaderFooter {
        "deckDidChange"?: EventEmitter<HTMLElement>;
        "deckElement"?: HTMLElement;
        "onNavigateSettings"?: (event: CustomEvent<void>) => void;
        "onNavigateSignIn"?: (event: CustomEvent<void>) => void;
    }
    interface AppDeckPagenumber {
        "deckDidChange"?: EventEmitter<HTMLElement>;
        "deckElement"?: HTMLDeckgoDeckElement;
        "slideNumber"?: number;
    }
    interface AppDeckStyle {
        "deckDidChange"?: EventEmitter<HTMLElement>;
        "onBlockSlide"?: (event: CustomEvent<boolean>) => void;
        "onSignIn"?: (event: CustomEvent<void>) => void;
        "slideNumber"?: number;
    }
    interface AppDeckTransition {
        "deckElement"?: HTMLDeckgoDeckElement;
        "onDeckNeedChange"?: (event: CustomEvent<DeckAction>) => void;
        "onTransitionChange"?: (event: CustomEvent<void>) => void;
    }
    interface AppDecks {
    }
    interface AppDelete {
    }
    interface AppDemo {
        "selectedElement"?: HTMLElement;
    }
    interface AppDocEditor {
    }
    interface AppDocIndicator {
    }
    interface AppDocs {
    }
    interface AppEditMode {
    }
    interface AppEditSlide {
        "selectedElement"?: SelectedElement;
        "slideDidChange"?: EventEmitter<HTMLElement>;
    }
    interface AppEditSlideAuthor {
        "selectedElement"?: HTMLElement;
        "slideDidChange"?: EventEmitter<HTMLElement>;
    }
    interface AppEditSlideChart {
        "onAction"?: (event: CustomEvent<EditAction>) => void;
        "selectedElement"?: HTMLElement;
        "slideDidChange"?: EventEmitter<HTMLElement>;
    }
    interface AppEditSlideQrcode {
        "onAction"?: (event: CustomEvent<EditAction>) => void;
        "selectedElement"?: HTMLElement;
        "slideDidChange"?: EventEmitter<HTMLElement>;
    }
    interface AppEditSlideUser {
        "selectedElement"?: SelectedElement;
        "slideDidChange"?: EventEmitter<HTMLElement>;
    }
    interface AppEditor {
    }
    interface AppElementAlignment {
        "onElementDidMoved"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: SelectedElement;
    }
    interface AppElementStyle {
        "imageHelper"?: ImageHelper;
        "imgDidChange"?: EventEmitter<HTMLElement>;
        "onOptionsDidChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: SelectedElement;
    }
    interface AppEmbed {
    }
    interface AppExpansionPanel {
        "expanded"?: Expanded;
        "expander"?: boolean;
        "onExpansion"?: (event: CustomEvent<Expanded>) => void;
    }
    interface AppFullscreenInfo {
    }
    interface AppGetHelp {
    }
    interface AppGif {
    }
    interface AppImageChoice {
        "deck"?: boolean;
        "deleteBackground"?: boolean;
        "onAction"?: (event: CustomEvent<ImageAction>) => void;
        "selectedElement"?: HTMLElement;
        "slide"?: boolean;
    }
    interface AppImageElement {
        "selectedElement"?: HTMLElement;
        "slide"?: boolean;
    }
    interface AppImageHistory {
        "deck"?: boolean;
        "onSelectImage"?: (event: CustomEvent<UnsplashPhoto | TenorGif | StorageFile | Waves>) => void;
        "slide"?: boolean;
    }
    interface AppImageStyle {
        "onImgDidChange"?: (event: CustomEvent<HTMLElement>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppLineWidth {
        "onLineWidthChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppLinks {
    }
    interface AppList {
        "onListStyleChanged"?: (event: CustomEvent<ListStyle>) => void;
        "onToggleList"?: (event: CustomEvent<SlotType.OL | SlotType.UL>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppLogo {
    }
    interface AppMath {
        "mathDidChange"?: EventEmitter<HTMLElement>;
        "selectedElement"?: HTMLElement;
    }
    interface AppMenu {
    }
    interface AppMoreDeckActions {
    }
    interface AppMoreElementActions {
        "clone"?: boolean;
        "images"?: boolean;
        "notes"?: boolean;
        "transform"?: boolean;
    }
    interface AppMoreFileActions {
    }
    interface AppMoreShareOptions {
    }
    interface AppNavigation {
        "actions"?: 'all' | 'none' | 'editor-less';
    }
    interface AppNavigationEnd {
        "editorActions"?: boolean;
    }
    interface AppNavigationStart {
    }
    interface AppNew {
    }
    interface AppNoTemplates {
    }
    interface AppNotes {
        "selectedElement"?: HTMLElement;
    }
    interface AppPlayground {
        "selectedElement"?: HTMLElement;
    }
    interface AppPlaygroundPlaceholder {
    }
    interface AppPoll {
        "pollKey"?: string;
    }
    interface AppPollOptions {
        "selectedElement"?: HTMLElement;
        "slideDidChange"?: EventEmitter<HTMLElement>;
    }
    interface AppPopoverConfirm {
        "onConfirm"?: (event: CustomEvent<boolean>) => void;
    }
    interface AppPresent {
        "fullscreen"?: boolean;
        "onToggleFullScreen"?: (event: CustomEvent<void>) => void;
    }
    interface AppProfile {
    }
    interface AppPublish {
    }
    interface AppPublishDone {
        "publishedUrl"?: string;
    }
    interface AppPublishEdit {
        "onPublished"?: (event: CustomEvent<string>) => void;
    }
    interface AppPublishTags {
        "disableRemove"?: boolean;
        "onRemoveTag"?: (event: CustomEvent<string>) => void;
        "tags"?: string[];
    }
    interface AppRandomGif {
        "keyword"?: string;
    }
    interface AppRemoteConnect {
    }
    interface AppRemoteRequest {
    }
    interface AppReveal {
        "onToggleReveal"?: (event: CustomEvent<boolean>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppRoot {
    }
    interface AppSelectTargetElement {
        "chart"?: boolean;
        "code"?: boolean;
        "headerFooter"?: boolean;
        "image"?: boolean;
        "onApplyTo"?: (event: CustomEvent<TargetElement>) => void;
        "qrCode"?: boolean;
        "shape"?: boolean;
        "sides"?: boolean;
        "slide"?: boolean;
        "textTarget"?: boolean;
        "transition"?: boolean;
        "wordCloud"?: boolean;
    }
    interface AppShape {
        "onSlideDidChange"?: (event: CustomEvent<HTMLElement>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppShare {
    }
    interface AppShareOptions {
        "onSelectedOption"?: (event: CustomEvent<MoreAction>) => void;
    }
    interface AppSignin {
    }
    interface AppSigninPage {
    }
    interface AppSlideNavigate {
        "onReorder"?: (event: CustomEvent<ItemReorderEventDetail>) => void;
    }
    interface AppSlidePreview {
        "deckRef": HTMLDeckgoDeckElement;
        "onPreviewAttached"?: (event: CustomEvent<void>) => void;
    }
    interface AppSlideThumbnail {
        "deck"?: HTMLDeckgoDeckElement;
        "slide"?: HTMLElement;
    }
    interface AppSlideWarning {
    }
    interface AppSlideWarningInfo {
        "lowContrast"?: boolean;
        "overflow"?: boolean;
    }
    interface AppSlidesAside {
        "activeIndex"?: number;
        "deckRef": HTMLDeckgoDeckElement;
        "onDidReorder"?: (event: CustomEvent<void>) => void;
        "onReorder"?: (event: CustomEvent<ItemReorderEventDetail>) => void;
        "onStepTo"?: (event: CustomEvent<HTMLElement | undefined>) => void;
    }
    interface AppSlotType {
        "onSelectType"?: (event: CustomEvent<SlotType | null>) => void;
        "selectedElement"?: HTMLElement | undefined;
        "skip"?: boolean;
        "slotTypes"?: SlotType[] | undefined;
    }
    interface AppSpinner {
    }
    interface AppStackingOrder {
        "activeSlideChildren"?: JSX.IntrinsicElements;
        "onOptionsDidChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppStorage {
    }
    interface AppStorageAdmin {
        "onFileDeleted"?: (event: CustomEvent<string>) => void;
        "storageFile": StorageFile;
    }
    interface AppStorageData {
    }
    interface AppStorageFiles {
        "admin"?: boolean;
        "folder": 'data' | 'images';
        "onSelectAsset"?: (event: CustomEvent<StorageFile>) => void;
    }
    interface AppStorageImages {
    }
    interface AppStrokeWidth {
        "onStrokeWidthChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppSyncInfo {
    }
    interface AppTemplate {
        "template"?: Template | undefined;
    }
    interface AppTemplateShowcase {
        "author"?: boolean;
        "editable"?: boolean;
        "template"?: Template;
    }
    interface AppTemplates {
    }
    interface AppTemplatesCharts {
        "onSelectedTemplate"?: (event: CustomEvent<{
		template: SlideTemplate;
		attributes: SlideAttributes;
	}>) => void;
    }
    interface AppTemplatesCommunity {
        "onSelectedTemplate"?: (event: CustomEvent<Template>) => void;
    }
    interface AppTemplatesContent {
        "highlight"?: boolean;
        "highlightIndex"?: number | undefined;
        "selected"?: boolean;
    }
    interface AppTemplatesDefault {
        "onAddSlideAspectRatio"?: (event: CustomEvent<void>) => void;
        "onAddSlideAuthor"?: (event: CustomEvent<void>) => void;
        "onAddSlideQRCode"?: (event: CustomEvent<void>) => void;
        "onComposeTemplate"?: (event: CustomEvent<InitTemplate>) => void;
        "onSelectCharts"?: (event: CustomEvent<void>) => void;
        "onSelectedTemplate"?: (event: CustomEvent<{
		template: SlideTemplate | Template;
		attributes?: SlideAttributes;
	}>) => void;
    }
    interface AppTemplatesSplit {
        "highlight"?: boolean;
        "highlightIndex"?: number | undefined;
        "selected"?: boolean;
        "vertical"?: boolean;
    }
    interface AppTemplatesTitle {
        "highlight"?: boolean;
        "highlightIndex"?: number | undefined;
        "selected"?: boolean;
    }
    interface AppTemplatesUser {
        "onNavigateSignIn"?: (event: CustomEvent<void>) => void;
        "onSelectedTemplate"?: (event: CustomEvent<Template>) => void;
    }
    interface AppText {
        "deckDidChange"?: EventEmitter<HTMLElement>;
        "onFontsChange"?: (event: CustomEvent<void>) => void;
        "onTextDidChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: SelectedElement;
    }
    interface AppTextChart {
        "onTextChange"?: (event: CustomEvent<void>) => void;
        "selectedElement"?: HTMLElement;
    }
    interface AppTransformElement {
        "selectedElement"?: HTMLElement;
    }
    interface AppTransformParagraph {
        "containerRef"?: HTMLElement | undefined;
    }
    interface AppTransformSlide {
        "selectedElement"?: HTMLElement;
    }
    interface AppUnpublish {
    }
    interface AppUnsplash {
    }
    interface AppUserDelete {
        "username"?: string;
    }
    interface AppUserInfo {
        "displayAvatar"?: boolean;
    }
    interface AppUserMenu {
    }
    interface AppWaves {
    }
    interface AppYoutube {
        "selectedElement"?: HTMLElement;
    }
    interface DeckdeckgoLine {
        "endArrow"?: boolean;
        "isEditable"?: boolean;
        "lineColor"?: string;
        "lineWidth"?: number;
        "onLinePointerDidMove"?: (event: CustomEvent<void>) => void;
        "onLinePointerMove"?: (event: CustomEvent<void>) => void;
        "pointer"?: string;
        "startArrow"?: boolean;
    }
    interface DeckdeckgoLineElbow {
        "endArrow"?: boolean;
        "isEditable"?: boolean;
        "lineColor"?: string;
        "lineWidth"?: number;
        "onLinePointerDidMove"?: (event: CustomEvent<void>) => void;
        "onLinePointerMove"?: (event: CustomEvent<void>) => void;
        "pointer"?: string;
        "router"?: string;
        "startArrow"?: boolean;
    }
    interface DeckgoCustomBarChart {
        /**
          * Display multiple graphs and animate the transition between these
         */
        "animation"?: boolean;
        /**
          * Duration of the transition between graphs
         */
        "animationDuration"?: number;
        /**
          * Set to `true` in case you would like to load (fetch) the data by yourself. Useful in case your data are protected with a token.
         */
        "customLoader"?: boolean;
        /**
          * Instead of a source file, source data can also be provided as an array of `DeckdeckgoBarChartData`
         */
        "data"?: DeckdeckgoBarChartData[];
        "fontFamily"?: string;
        "fontSize"?: string;
        /**
          * The height of the chart
         */
        "height"?: number;
        /**
          * The margin bottom of the chart in pixel
         */
        "marginBottom"?: number;
        /**
          * The margin left of the chart in pixel
         */
        "marginLeft"?: number;
        /**
          * The margin right of the chart in pixel
         */
        "marginRight"?: number;
        /**
          * The margin top of the chart in pixel
         */
        "marginTop"?: number;
        /**
          * The event to be processed to load the data if you are using a custom loader.
          * @private
         */
        "onChartCustomLoad"?: (event: CustomEvent<string>) => void;
        /**
          * Emit the random colors that are generated for the charts.
         */
        "onChartRandomColor"?: (event: CustomEvent<string[]>) => void;
        /**
          * The line separator use in your csv file
         */
        "separator"?: string;
        /**
          * The path to the source file of the data
         */
        "src"?: string;
        /**
          * The width of the chart
         */
        "width"?: number;
        /**
          * If `false`, no axis y will be draw.
         */
        "yAxis"?: boolean;
        /**
          * Set a minimal value for the y Axis. Useful in case the series of data could contains only zeros.
         */
        "yAxisMin"?: number;
    }
    interface DeckgoCustomHorizontalBarChart {
        /**
          * Display multiple graphs and animate the transition between these
         */
        "animation"?: boolean;
        /**
          * Duration of the transition between graphs
         */
        "animationDuration"?: number;
        /**
          * Set to `true` in case you would like to load (fetch) the data by yourself. Useful in case your data are protected with a token.
         */
        "customLoader"?: boolean;
        /**
          * Instead of a source file, source data can also be provided as an array of `DeckdeckgoBarChartData`
         */
        "data"?: DeckdeckgoBarChartData[];
        "fontFamily"?: string;
        "fontSize"?: string;
        /**
          * The height of the chart
         */
        "height"?: number;
        /**
          * The margin bottom of the chart in pixel
         */
        "marginBottom"?: number;
        /**
          * The margin left of the chart in pixel
         */
        "marginLeft"?: number;
        /**
          * The margin right of the chart in pixel
         */
        "marginRight"?: number;
        /**
          * The margin top of the chart in pixel
         */
        "marginTop"?: number;
        /**
          * The event to be processed to load the data if you are using a custom loader.
          * @private
         */
        "onChartCustomLoad"?: (event: CustomEvent<string>) => void;
        /**
          * Emit the random colors that are generated for the charts.
         */
        "onChartRandomColor"?: (event: CustomEvent<string[]>) => void;
        /**
          * The line separator use in your csv file
         */
        "separator"?: string;
        /**
          * The path to the source file of the data
         */
        "src"?: string;
        /**
          * The width of the chart
         */
        "width"?: number;
        /**
          * If `false`, no axis x will be draw.
         */
        "xAxis"?: boolean;
        /**
          * Set a minimal value for the x Axis. Useful in case the series of data could contains only zeros.
         */
        "xAxisMin"?: number;
    }
    interface DeckgoCustomIeActionButton {
        "cssClass"?: string;
        "disableAction"?: boolean;
        "mobile"?: boolean;
        "onAction"?: (event: CustomEvent<UIEvent>) => void;
    }
    interface DeckgoCustomIeActionImage {
        "cssClass"?: string;
    }
    interface DeckgoCustomIeAlignActions {
        "anchorEvent"?: MouseEvent | TouchEvent;
        "containers"?: string;
        "contentAlign"?: ContentAlign;
        "mobile"?: boolean;
        "onAlignModified"?: (event: CustomEvent<any>) => void;
        "sticky"?: boolean;
    }
    interface DeckgoCustomIeColorActions {
        "action"?: 'color' | 'background-color';
        "mobile"?: boolean;
        "onExecCommand"?: (event: CustomEvent<ExecCommandAction>) => void;
        "palette"?: DeckdeckgoPalette[];
        "selection"?: Selection;
    }
    interface DeckgoCustomIeFontSizeActions {
        "fontSize"?: FontSize;
        "mobile"?: boolean;
        "onExecCommand"?: (event: CustomEvent<ExecCommandAction>) => void;
        "sticky"?: boolean;
    }
    interface DeckgoCustomIeImageActions {
        "anchorEvent"?: MouseEvent | TouchEvent;
        "containers"?: string;
        "imgAnchor"?: string;
        "imgDidChange"?: EventEmitter<HTMLElement>;
        "imgPropertyCssFloat"?: string;
        "imgPropertyWidth"?: string;
        "mobile"?: boolean;
        "onImgModified"?: (event: CustomEvent<void>) => void;
    }
    interface DeckgoCustomIeLinkActions {
        "anchorLink"?: AnchorLink;
        "containers"?: string;
        "linkCreated"?: EventEmitter<HTMLElement>;
        "mobile"?: boolean;
        "onLinkModified"?: (event: CustomEvent<boolean>) => void;
        "selection"?: Selection;
        "toolbarActions"?: ToolbarActions;
    }
    interface DeckgoCustomIeListActions {
        "contentList"?: ContentList;
        "disabledTitle"?: boolean;
        "mobile"?: boolean;
        "onExecCommand"?: (event: CustomEvent<ExecCommandAction>) => void;
        "selection"?: Selection;
        "sticky"?: boolean;
    }
    interface DeckgoCustomIeSeparator {
        "mobile"?: boolean;
    }
    interface DeckgoCustomIeStyleActions {
        "bold"?: boolean;
        "disabledTitle"?: boolean;
        "italic"?: boolean;
        "mobile"?: boolean;
        "onExecCommand"?: (event: CustomEvent<ExecCommandAction>) => void;
        "selection"?: Selection;
        "strikethrough"?: boolean;
        "underline"?: boolean;
    }
    interface DeckgoCustomIeTriangle {
        "mobile"?: boolean;
    }
    interface DeckgoCustomInlineEditor {
        "align"?: boolean;
        "attachTo"?: HTMLElement;
        "backgroundColor"?: boolean;
        "containers"?: string;
        "customActions"?: string;
        "fontSize"?: boolean;
        "imgAnchor"?: string;
        "imgEditable"?: boolean;
        "imgPropertyCssFloat"?: string;
        "imgPropertyWidth"?: string;
        "list"?: boolean;
        "mobile"?: boolean;
        "onCustomAction"?: (event: CustomEvent<InlineAction>) => void;
        "onImgDidChange"?: (event: CustomEvent<HTMLElement>) => void;
        "onLinkCreated"?: (event: CustomEvent<HTMLElement>) => void;
        "onStickyToolbarActivated"?: (event: CustomEvent<boolean>) => void;
        "onStyleDidChange"?: (event: CustomEvent<HTMLElement>) => void;
        "palette"?: DeckdeckgoPalette[];
        "stickyDesktop"?: boolean;
        "stickyMobile"?: boolean;
    }
    interface DeckgoCustomLineChart {
        /**
          * Display multiple graphs and animate the transition between these
         */
        "animation"?: boolean;
        /**
          * Duration of the transition between graphs
         */
        "animationDuration"?: number;
        /**
          * Draw the area.
         */
        "area"?: boolean;
        /**
          * Set to `true` in case you would like to load (fetch) the data by yourself. Useful in case your data are protected with a token.
         */
        "customLoader"?: boolean;
        /**
          * The pattern for the dates. All supported date format: https://date-fns.org/v2.0.0-alpha.26/docs/parse.
         */
        "datePattern"?: string;
        "fontFamily"?: string;
        "fontSize"?: string;
        /**
          * Render a grid behind the chart.
         */
        "grid"?: boolean;
        /**
          * The height of the chart
         */
        "height"?: number;
        /**
          * The margin bottom of the chart in pixel
         */
        "marginBottom"?: number;
        /**
          * The margin left of the chart in pixel
         */
        "marginLeft"?: number;
        /**
          * The margin right of the chart in pixel
         */
        "marginRight"?: number;
        /**
          * The margin top of the chart in pixel
         */
        "marginTop"?: number;
        /**
          * The event to be processed to load the data if you are using a custom loader.
          * @private
         */
        "onChartCustomLoad"?: (event: CustomEvent<string>) => void;
        /**
          * Emit the random colors that are generated for the charts.
         */
        "onChartRandomColor"?: (event: CustomEvent<string[]>) => void;
        /**
          * The line separator use in your csv file
         */
        "separator"?: string;
        /**
          * Render smooth lines or with edges.
         */
        "smooth"?: boolean;
        /**
          * The path to the source file of the data
         */
        "src"?: string;
        /**
          * Render ticks on the axes.
         */
        "ticks"?: number;
        /**
          * The width of the chart
         */
        "width"?: number;
        /**
          * The y axis behavior.
         */
        "yAxisDomain"?: string;
    }
    interface DeckgoCustomPieChart {
        /**
          * Display multiple graphs and animate the transition between these
         */
        "animation"?: boolean;
        /**
          * Duration of the transition between graphs
         */
        "animationDuration"?: number;
        /**
          * Set to `true` in case you would like to load (fetch) the data by yourself. Useful in case your data are protected with a token.
         */
        "customLoader"?: boolean;
        "fontFamily"?: string;
        "fontSize"?: string;
        /**
          * The height of the chart
         */
        "height"?: number;
        /**
          * The inner radius of the pie
         */
        "innerRadius"?: number;
        /**
          * The margin bottom of the chart in pixel
         */
        "marginBottom"?: number;
        /**
          * The margin left of the chart in pixel
         */
        "marginLeft"?: number;
        /**
          * The margin right of the chart in pixel
         */
        "marginRight"?: number;
        /**
          * The margin top of the chart in pixel
         */
        "marginTop"?: number;
        /**
          * The event to be processed to load the data if you are using a custom loader.
          * @private
         */
        "onChartCustomLoad"?: (event: CustomEvent<string>) => void;
        /**
          * Emit the random colors that are generated for the charts.
         */
        "onChartRandomColor"?: (event: CustomEvent<string[]>) => void;
        /**
          * The line separator use in your csv file
         */
        "separator"?: string;
        /**
          * The path to the source file of the data
         */
        "src"?: string;
        /**
          * The width of the chart
         */
        "width"?: number;
    }
    interface DeckgoDrrText {
        "connected"?: boolean;
        /**
          * Allow the component to be dragged in which direction
         */
        "drag"?: 'x-axis' | 'y-axis' | 'all' | 'none';
        /**
          * Emitted when the component is selected or unselected. It propagates the host component itself
         */
        "onDrrSelectText"?: (event: CustomEvent<HTMLElement | undefined>) => void;
        /**
          * Emitted when the component is modified respectively when the user stop interacting. It propagates the host component itself
         */
        "onDrrTextDidChange"?: (event: CustomEvent<HTMLElement | undefined>) => void;
        /**
          * Emitted by other feature or element which moved deckgo-drr-text
         */
        "onDrrTextDidMoved"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the component is resizing. It propagates the host component itself
         */
        "onDrrTextResize"?: (event: CustomEvent<void>) => void;
        /**
          * Allow or not the resize actions
         */
        "resize"?: boolean;
        /**
          * Allow or not the rotation of the element
         */
        "rotation"?: boolean;
        /**
          * Useful for shape edition.
         */
        "shape"?: boolean;
        /**
          * To be used if your slotted element is to be defined as contentEditable. Useful for text edition.
         */
        "text"?: boolean;
        /**
          * The component could be use with percentage, viewport (vw/vh) or pixels (px) units. All relative to the container
         */
        "unit"?: 'percentage' | 'viewport' | 'px';
    }
    interface DeckgoIeFontFamilyActions {
        "attachTo"?: HTMLElement;
        "fontFamily"?: string;
        "mobile"?: boolean;
        "onExecCommand"?: (event: CustomEvent<ExecCommandAction>) => void;
    }
    interface DeckgoSlideChartCustom {
        "animation"?: boolean;
        "animationDuration"?: number;
        "area"?: string;
        "chartHeightCss"?: string;
        "chartWidthCss"?: string;
        /**
          * If you provide actions for the all deck but, a specific one for this slide, set this option to true
         */
        "customActions"?: boolean;
        /**
          * If you define a background for the all deck but, a specific one for this slide, set this option to true
         */
        "customBackground"?: boolean;
        "customLoader"?: boolean;
        "datePattern"?: string;
        "grid"?: string;
        "height"?: number;
        "innerRadius"?: number;
        "marginBottom"?: number;
        "marginLeft"?: number;
        "marginRight"?: number;
        "marginTop"?: number;
        /**
          * Triggered when the slide is loaded
         */
        "onSlideDidLoad"?: (event: CustomEvent<void>) => void;
        "range"?: string[];
        "separator"?: string;
        "smooth"?: string;
        "src"?: string;
        "ticks"?: number;
        /**
          * The type of the chart, pie, line or bar
         */
        "type"?: string;
        "width"?: number;
        "yAxisDomain"?: string;
    }
    interface IntrinsicElements {
        "app-404": App404;
        "app-action-add-slide": AppActionAddSlide;
        "app-action-busy": AppActionBusy;
        "app-action-help": AppActionHelp;
        "app-action-share": AppActionShare;
        "app-actions-deck": AppActionsDeck;
        "app-actions-deck-editor": AppActionsDeckEditor;
        "app-actions-element": AppActionsElement;
        "app-add-paragraph": AppAddParagraph;
        "app-arrow": AppArrow;
        "app-asset-data": AppAssetData;
        "app-asset-image": AppAssetImage;
        "app-avatar": AppAvatar;
        "app-block": AppBlock;
        "app-block-chart": AppBlockChart;
        "app-border-color": AppBorderColor;
        "app-border-radius": AppBorderRadius;
        "app-bottom-sheet": AppBottomSheet;
        "app-box-shadow": AppBoxShadow;
        "app-breadcrumbs": AppBreadcrumbs;
        "app-close-menu": AppCloseMenu;
        "app-cloud-wait": AppCloudWait;
        "app-code": AppCode;
        "app-code-languages": AppCodeLanguages;
        "app-color": AppColor;
        "app-color-chart": AppColorChart;
        "app-color-code": AppColorCode;
        "app-color-fill-stroke": AppColorFillStroke;
        "app-color-line": AppColorLine;
        "app-color-qrcode": AppColorQrcode;
        "app-color-sides": AppColorSides;
        "app-color-text-background": AppColorTextBackground;
        "app-color-word-cloud": AppColorWordCloud;
        "app-copy-style": AppCopyStyle;
        "app-create-slide": AppCreateSlide;
        "app-customization": AppCustomization;
        "app-dashboard-actions": AppDashboardActions;
        "app-deck-editor": AppDeckEditor;
        "app-deck-fonts": AppDeckFonts;
        "app-deck-header-footer": AppDeckHeaderFooter;
        "app-deck-pagenumber": AppDeckPagenumber;
        "app-deck-style": AppDeckStyle;
        "app-deck-transition": AppDeckTransition;
        "app-decks": AppDecks;
        "app-delete": AppDelete;
        "app-demo": AppDemo;
        "app-doc-editor": AppDocEditor;
        "app-doc-indicator": AppDocIndicator;
        "app-docs": AppDocs;
        "app-edit-mode": AppEditMode;
        "app-edit-slide": AppEditSlide;
        "app-edit-slide-author": AppEditSlideAuthor;
        "app-edit-slide-chart": AppEditSlideChart;
        "app-edit-slide-qrcode": AppEditSlideQrcode;
        "app-edit-slide-user": AppEditSlideUser;
        "app-editor": AppEditor;
        "app-element-alignment": AppElementAlignment;
        "app-element-style": AppElementStyle;
        "app-embed": AppEmbed;
        "app-expansion-panel": AppExpansionPanel;
        "app-fullscreen-info": AppFullscreenInfo;
        "app-get-help": AppGetHelp;
        "app-gif": AppGif;
        "app-image-choice": AppImageChoice;
        "app-image-element": AppImageElement;
        "app-image-history": AppImageHistory;
        "app-image-style": AppImageStyle;
        "app-line-width": AppLineWidth;
        "app-links": AppLinks;
        "app-list": AppList;
        "app-logo": AppLogo;
        "app-math": AppMath;
        "app-menu": AppMenu;
        "app-more-deck-actions": AppMoreDeckActions;
        "app-more-element-actions": AppMoreElementActions;
        "app-more-file-actions": AppMoreFileActions;
        "app-more-share-options": AppMoreShareOptions;
        "app-navigation": AppNavigation;
        "app-navigation-end": AppNavigationEnd;
        "app-navigation-start": AppNavigationStart;
        "app-new": AppNew;
        "app-no-templates": AppNoTemplates;
        "app-notes": AppNotes;
        "app-playground": AppPlayground;
        "app-playground-placeholder": AppPlaygroundPlaceholder;
        "app-poll": AppPoll;
        "app-poll-options": AppPollOptions;
        "app-popover-confirm": AppPopoverConfirm;
        "app-present": AppPresent;
        "app-profile": AppProfile;
        "app-publish": AppPublish;
        "app-publish-done": AppPublishDone;
        "app-publish-edit": AppPublishEdit;
        "app-publish-tags": AppPublishTags;
        "app-random-gif": AppRandomGif;
        "app-remote-connect": AppRemoteConnect;
        "app-remote-request": AppRemoteRequest;
        "app-reveal": AppReveal;
        "app-root": AppRoot;
        "app-select-target-element": AppSelectTargetElement;
        "app-shape": AppShape;
        "app-share": AppShare;
        "app-share-options": AppShareOptions;
        "app-signin": AppSignin;
        "app-signin-page": AppSigninPage;
        "app-slide-navigate": AppSlideNavigate;
        "app-slide-preview": AppSlidePreview;
        "app-slide-thumbnail": AppSlideThumbnail;
        "app-slide-warning": AppSlideWarning;
        "app-slide-warning-info": AppSlideWarningInfo;
        "app-slides-aside": AppSlidesAside;
        "app-slot-type": AppSlotType;
        "app-spinner": AppSpinner;
        "app-stacking-order": AppStackingOrder;
        "app-storage": AppStorage;
        "app-storage-admin": AppStorageAdmin;
        "app-storage-data": AppStorageData;
        "app-storage-files": AppStorageFiles;
        "app-storage-images": AppStorageImages;
        "app-stroke-width": AppStrokeWidth;
        "app-sync-info": AppSyncInfo;
        "app-template": AppTemplate;
        "app-template-showcase": AppTemplateShowcase;
        "app-templates": AppTemplates;
        "app-templates-charts": AppTemplatesCharts;
        "app-templates-community": AppTemplatesCommunity;
        "app-templates-content": AppTemplatesContent;
        "app-templates-default": AppTemplatesDefault;
        "app-templates-split": AppTemplatesSplit;
        "app-templates-title": AppTemplatesTitle;
        "app-templates-user": AppTemplatesUser;
        "app-text": AppText;
        "app-text-chart": AppTextChart;
        "app-transform-element": AppTransformElement;
        "app-transform-paragraph": AppTransformParagraph;
        "app-transform-slide": AppTransformSlide;
        "app-unpublish": AppUnpublish;
        "app-unsplash": AppUnsplash;
        "app-user-delete": AppUserDelete;
        "app-user-info": AppUserInfo;
        "app-user-menu": AppUserMenu;
        "app-waves": AppWaves;
        "app-youtube": AppYoutube;
        "deckdeckgo-line": DeckdeckgoLine;
        "deckdeckgo-line-elbow": DeckdeckgoLineElbow;
        "deckgo-custom-bar-chart": DeckgoCustomBarChart;
        "deckgo-custom-horizontal-bar-chart": DeckgoCustomHorizontalBarChart;
        "deckgo-custom-ie-action-button": DeckgoCustomIeActionButton;
        "deckgo-custom-ie-action-image": DeckgoCustomIeActionImage;
        "deckgo-custom-ie-align-actions": DeckgoCustomIeAlignActions;
        "deckgo-custom-ie-color-actions": DeckgoCustomIeColorActions;
        "deckgo-custom-ie-font-size-actions": DeckgoCustomIeFontSizeActions;
        "deckgo-custom-ie-image-actions": DeckgoCustomIeImageActions;
        "deckgo-custom-ie-link-actions": DeckgoCustomIeLinkActions;
        "deckgo-custom-ie-list-actions": DeckgoCustomIeListActions;
        "deckgo-custom-ie-separator": DeckgoCustomIeSeparator;
        "deckgo-custom-ie-style-actions": DeckgoCustomIeStyleActions;
        "deckgo-custom-ie-triangle": DeckgoCustomIeTriangle;
        "deckgo-custom-inline-editor": DeckgoCustomInlineEditor;
        "deckgo-custom-line-chart": DeckgoCustomLineChart;
        "deckgo-custom-pie-chart": DeckgoCustomPieChart;
        "deckgo-drr-text": DeckgoDrrText;
        "deckgo-ie-font-family-actions": DeckgoIeFontFamilyActions;
        "deckgo-slide-chart-custom": DeckgoSlideChartCustom;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-404": LocalJSX.App404 & JSXBase.HTMLAttributes<HTMLApp404Element>;
            "app-action-add-slide": LocalJSX.AppActionAddSlide & JSXBase.HTMLAttributes<HTMLAppActionAddSlideElement>;
            "app-action-busy": LocalJSX.AppActionBusy & JSXBase.HTMLAttributes<HTMLAppActionBusyElement>;
            "app-action-help": LocalJSX.AppActionHelp & JSXBase.HTMLAttributes<HTMLAppActionHelpElement>;
            "app-action-share": LocalJSX.AppActionShare & JSXBase.HTMLAttributes<HTMLAppActionShareElement>;
            "app-actions-deck": LocalJSX.AppActionsDeck & JSXBase.HTMLAttributes<HTMLAppActionsDeckElement>;
            "app-actions-deck-editor": LocalJSX.AppActionsDeckEditor & JSXBase.HTMLAttributes<HTMLAppActionsDeckEditorElement>;
            "app-actions-element": LocalJSX.AppActionsElement & JSXBase.HTMLAttributes<HTMLAppActionsElementElement>;
            "app-add-paragraph": LocalJSX.AppAddParagraph & JSXBase.HTMLAttributes<HTMLAppAddParagraphElement>;
            "app-arrow": LocalJSX.AppArrow & JSXBase.HTMLAttributes<HTMLAppArrowElement>;
            "app-asset-data": LocalJSX.AppAssetData & JSXBase.HTMLAttributes<HTMLAppAssetDataElement>;
            "app-asset-image": LocalJSX.AppAssetImage & JSXBase.HTMLAttributes<HTMLAppAssetImageElement>;
            "app-avatar": LocalJSX.AppAvatar & JSXBase.HTMLAttributes<HTMLAppAvatarElement>;
            "app-block": LocalJSX.AppBlock & JSXBase.HTMLAttributes<HTMLAppBlockElement>;
            "app-block-chart": LocalJSX.AppBlockChart & JSXBase.HTMLAttributes<HTMLAppBlockChartElement>;
            "app-border-color": LocalJSX.AppBorderColor & JSXBase.HTMLAttributes<HTMLAppBorderColorElement>;
            "app-border-radius": LocalJSX.AppBorderRadius & JSXBase.HTMLAttributes<HTMLAppBorderRadiusElement>;
            "app-bottom-sheet": LocalJSX.AppBottomSheet & JSXBase.HTMLAttributes<HTMLAppBottomSheetElement>;
            "app-box-shadow": LocalJSX.AppBoxShadow & JSXBase.HTMLAttributes<HTMLAppBoxShadowElement>;
            "app-breadcrumbs": LocalJSX.AppBreadcrumbs & JSXBase.HTMLAttributes<HTMLAppBreadcrumbsElement>;
            "app-close-menu": LocalJSX.AppCloseMenu & JSXBase.HTMLAttributes<HTMLAppCloseMenuElement>;
            "app-cloud-wait": LocalJSX.AppCloudWait & JSXBase.HTMLAttributes<HTMLAppCloudWaitElement>;
            "app-code": LocalJSX.AppCode & JSXBase.HTMLAttributes<HTMLAppCodeElement>;
            "app-code-languages": LocalJSX.AppCodeLanguages & JSXBase.HTMLAttributes<HTMLAppCodeLanguagesElement>;
            "app-color": LocalJSX.AppColor & JSXBase.HTMLAttributes<HTMLAppColorElement>;
            "app-color-chart": LocalJSX.AppColorChart & JSXBase.HTMLAttributes<HTMLAppColorChartElement>;
            "app-color-code": LocalJSX.AppColorCode & JSXBase.HTMLAttributes<HTMLAppColorCodeElement>;
            "app-color-fill-stroke": LocalJSX.AppColorFillStroke & JSXBase.HTMLAttributes<HTMLAppColorFillStrokeElement>;
            "app-color-line": LocalJSX.AppColorLine & JSXBase.HTMLAttributes<HTMLAppColorLineElement>;
            "app-color-qrcode": LocalJSX.AppColorQrcode & JSXBase.HTMLAttributes<HTMLAppColorQrcodeElement>;
            "app-color-sides": LocalJSX.AppColorSides & JSXBase.HTMLAttributes<HTMLAppColorSidesElement>;
            "app-color-text-background": LocalJSX.AppColorTextBackground & JSXBase.HTMLAttributes<HTMLAppColorTextBackgroundElement>;
            "app-color-word-cloud": LocalJSX.AppColorWordCloud & JSXBase.HTMLAttributes<HTMLAppColorWordCloudElement>;
            "app-copy-style": LocalJSX.AppCopyStyle & JSXBase.HTMLAttributes<HTMLAppCopyStyleElement>;
            "app-create-slide": LocalJSX.AppCreateSlide & JSXBase.HTMLAttributes<HTMLAppCreateSlideElement>;
            "app-customization": LocalJSX.AppCustomization & JSXBase.HTMLAttributes<HTMLAppCustomizationElement>;
            "app-dashboard-actions": LocalJSX.AppDashboardActions & JSXBase.HTMLAttributes<HTMLAppDashboardActionsElement>;
            "app-deck-editor": LocalJSX.AppDeckEditor & JSXBase.HTMLAttributes<HTMLAppDeckEditorElement>;
            "app-deck-fonts": LocalJSX.AppDeckFonts & JSXBase.HTMLAttributes<HTMLAppDeckFontsElement>;
            "app-deck-header-footer": LocalJSX.AppDeckHeaderFooter & JSXBase.HTMLAttributes<HTMLAppDeckHeaderFooterElement>;
            "app-deck-pagenumber": LocalJSX.AppDeckPagenumber & JSXBase.HTMLAttributes<HTMLAppDeckPagenumberElement>;
            "app-deck-style": LocalJSX.AppDeckStyle & JSXBase.HTMLAttributes<HTMLAppDeckStyleElement>;
            "app-deck-transition": LocalJSX.AppDeckTransition & JSXBase.HTMLAttributes<HTMLAppDeckTransitionElement>;
            "app-decks": LocalJSX.AppDecks & JSXBase.HTMLAttributes<HTMLAppDecksElement>;
            "app-delete": LocalJSX.AppDelete & JSXBase.HTMLAttributes<HTMLAppDeleteElement>;
            "app-demo": LocalJSX.AppDemo & JSXBase.HTMLAttributes<HTMLAppDemoElement>;
            "app-doc-editor": LocalJSX.AppDocEditor & JSXBase.HTMLAttributes<HTMLAppDocEditorElement>;
            "app-doc-indicator": LocalJSX.AppDocIndicator & JSXBase.HTMLAttributes<HTMLAppDocIndicatorElement>;
            "app-docs": LocalJSX.AppDocs & JSXBase.HTMLAttributes<HTMLAppDocsElement>;
            "app-edit-mode": LocalJSX.AppEditMode & JSXBase.HTMLAttributes<HTMLAppEditModeElement>;
            "app-edit-slide": LocalJSX.AppEditSlide & JSXBase.HTMLAttributes<HTMLAppEditSlideElement>;
            "app-edit-slide-author": LocalJSX.AppEditSlideAuthor & JSXBase.HTMLAttributes<HTMLAppEditSlideAuthorElement>;
            "app-edit-slide-chart": LocalJSX.AppEditSlideChart & JSXBase.HTMLAttributes<HTMLAppEditSlideChartElement>;
            "app-edit-slide-qrcode": LocalJSX.AppEditSlideQrcode & JSXBase.HTMLAttributes<HTMLAppEditSlideQrcodeElement>;
            "app-edit-slide-user": LocalJSX.AppEditSlideUser & JSXBase.HTMLAttributes<HTMLAppEditSlideUserElement>;
            "app-editor": LocalJSX.AppEditor & JSXBase.HTMLAttributes<HTMLAppEditorElement>;
            "app-element-alignment": LocalJSX.AppElementAlignment & JSXBase.HTMLAttributes<HTMLAppElementAlignmentElement>;
            "app-element-style": LocalJSX.AppElementStyle & JSXBase.HTMLAttributes<HTMLAppElementStyleElement>;
            "app-embed": LocalJSX.AppEmbed & JSXBase.HTMLAttributes<HTMLAppEmbedElement>;
            "app-expansion-panel": LocalJSX.AppExpansionPanel & JSXBase.HTMLAttributes<HTMLAppExpansionPanelElement>;
            "app-fullscreen-info": LocalJSX.AppFullscreenInfo & JSXBase.HTMLAttributes<HTMLAppFullscreenInfoElement>;
            "app-get-help": LocalJSX.AppGetHelp & JSXBase.HTMLAttributes<HTMLAppGetHelpElement>;
            "app-gif": LocalJSX.AppGif & JSXBase.HTMLAttributes<HTMLAppGifElement>;
            "app-image-choice": LocalJSX.AppImageChoice & JSXBase.HTMLAttributes<HTMLAppImageChoiceElement>;
            "app-image-element": LocalJSX.AppImageElement & JSXBase.HTMLAttributes<HTMLAppImageElementElement>;
            "app-image-history": LocalJSX.AppImageHistory & JSXBase.HTMLAttributes<HTMLAppImageHistoryElement>;
            "app-image-style": LocalJSX.AppImageStyle & JSXBase.HTMLAttributes<HTMLAppImageStyleElement>;
            "app-line-width": LocalJSX.AppLineWidth & JSXBase.HTMLAttributes<HTMLAppLineWidthElement>;
            "app-links": LocalJSX.AppLinks & JSXBase.HTMLAttributes<HTMLAppLinksElement>;
            "app-list": LocalJSX.AppList & JSXBase.HTMLAttributes<HTMLAppListElement>;
            "app-logo": LocalJSX.AppLogo & JSXBase.HTMLAttributes<HTMLAppLogoElement>;
            "app-math": LocalJSX.AppMath & JSXBase.HTMLAttributes<HTMLAppMathElement>;
            "app-menu": LocalJSX.AppMenu & JSXBase.HTMLAttributes<HTMLAppMenuElement>;
            "app-more-deck-actions": LocalJSX.AppMoreDeckActions & JSXBase.HTMLAttributes<HTMLAppMoreDeckActionsElement>;
            "app-more-element-actions": LocalJSX.AppMoreElementActions & JSXBase.HTMLAttributes<HTMLAppMoreElementActionsElement>;
            "app-more-file-actions": LocalJSX.AppMoreFileActions & JSXBase.HTMLAttributes<HTMLAppMoreFileActionsElement>;
            "app-more-share-options": LocalJSX.AppMoreShareOptions & JSXBase.HTMLAttributes<HTMLAppMoreShareOptionsElement>;
            "app-navigation": LocalJSX.AppNavigation & JSXBase.HTMLAttributes<HTMLAppNavigationElement>;
            "app-navigation-end": LocalJSX.AppNavigationEnd & JSXBase.HTMLAttributes<HTMLAppNavigationEndElement>;
            "app-navigation-start": LocalJSX.AppNavigationStart & JSXBase.HTMLAttributes<HTMLAppNavigationStartElement>;
            "app-new": LocalJSX.AppNew & JSXBase.HTMLAttributes<HTMLAppNewElement>;
            "app-no-templates": LocalJSX.AppNoTemplates & JSXBase.HTMLAttributes<HTMLAppNoTemplatesElement>;
            "app-notes": LocalJSX.AppNotes & JSXBase.HTMLAttributes<HTMLAppNotesElement>;
            "app-playground": LocalJSX.AppPlayground & JSXBase.HTMLAttributes<HTMLAppPlaygroundElement>;
            "app-playground-placeholder": LocalJSX.AppPlaygroundPlaceholder & JSXBase.HTMLAttributes<HTMLAppPlaygroundPlaceholderElement>;
            "app-poll": LocalJSX.AppPoll & JSXBase.HTMLAttributes<HTMLAppPollElement>;
            "app-poll-options": LocalJSX.AppPollOptions & JSXBase.HTMLAttributes<HTMLAppPollOptionsElement>;
            "app-popover-confirm": LocalJSX.AppPopoverConfirm & JSXBase.HTMLAttributes<HTMLAppPopoverConfirmElement>;
            "app-present": LocalJSX.AppPresent & JSXBase.HTMLAttributes<HTMLAppPresentElement>;
            "app-profile": LocalJSX.AppProfile & JSXBase.HTMLAttributes<HTMLAppProfileElement>;
            "app-publish": LocalJSX.AppPublish & JSXBase.HTMLAttributes<HTMLAppPublishElement>;
            "app-publish-done": LocalJSX.AppPublishDone & JSXBase.HTMLAttributes<HTMLAppPublishDoneElement>;
            "app-publish-edit": LocalJSX.AppPublishEdit & JSXBase.HTMLAttributes<HTMLAppPublishEditElement>;
            "app-publish-tags": LocalJSX.AppPublishTags & JSXBase.HTMLAttributes<HTMLAppPublishTagsElement>;
            "app-random-gif": LocalJSX.AppRandomGif & JSXBase.HTMLAttributes<HTMLAppRandomGifElement>;
            "app-remote-connect": LocalJSX.AppRemoteConnect & JSXBase.HTMLAttributes<HTMLAppRemoteConnectElement>;
            "app-remote-request": LocalJSX.AppRemoteRequest & JSXBase.HTMLAttributes<HTMLAppRemoteRequestElement>;
            "app-reveal": LocalJSX.AppReveal & JSXBase.HTMLAttributes<HTMLAppRevealElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "app-select-target-element": LocalJSX.AppSelectTargetElement & JSXBase.HTMLAttributes<HTMLAppSelectTargetElementElement>;
            "app-shape": LocalJSX.AppShape & JSXBase.HTMLAttributes<HTMLAppShapeElement>;
            "app-share": LocalJSX.AppShare & JSXBase.HTMLAttributes<HTMLAppShareElement>;
            "app-share-options": LocalJSX.AppShareOptions & JSXBase.HTMLAttributes<HTMLAppShareOptionsElement>;
            "app-signin": LocalJSX.AppSignin & JSXBase.HTMLAttributes<HTMLAppSigninElement>;
            "app-signin-page": LocalJSX.AppSigninPage & JSXBase.HTMLAttributes<HTMLAppSigninPageElement>;
            "app-slide-navigate": LocalJSX.AppSlideNavigate & JSXBase.HTMLAttributes<HTMLAppSlideNavigateElement>;
            "app-slide-preview": LocalJSX.AppSlidePreview & JSXBase.HTMLAttributes<HTMLAppSlidePreviewElement>;
            "app-slide-thumbnail": LocalJSX.AppSlideThumbnail & JSXBase.HTMLAttributes<HTMLAppSlideThumbnailElement>;
            "app-slide-warning": LocalJSX.AppSlideWarning & JSXBase.HTMLAttributes<HTMLAppSlideWarningElement>;
            "app-slide-warning-info": LocalJSX.AppSlideWarningInfo & JSXBase.HTMLAttributes<HTMLAppSlideWarningInfoElement>;
            "app-slides-aside": LocalJSX.AppSlidesAside & JSXBase.HTMLAttributes<HTMLAppSlidesAsideElement>;
            "app-slot-type": LocalJSX.AppSlotType & JSXBase.HTMLAttributes<HTMLAppSlotTypeElement>;
            "app-spinner": LocalJSX.AppSpinner & JSXBase.HTMLAttributes<HTMLAppSpinnerElement>;
            "app-stacking-order": LocalJSX.AppStackingOrder & JSXBase.HTMLAttributes<HTMLAppStackingOrderElement>;
            "app-storage": LocalJSX.AppStorage & JSXBase.HTMLAttributes<HTMLAppStorageElement>;
            "app-storage-admin": LocalJSX.AppStorageAdmin & JSXBase.HTMLAttributes<HTMLAppStorageAdminElement>;
            "app-storage-data": LocalJSX.AppStorageData & JSXBase.HTMLAttributes<HTMLAppStorageDataElement>;
            "app-storage-files": LocalJSX.AppStorageFiles & JSXBase.HTMLAttributes<HTMLAppStorageFilesElement>;
            "app-storage-images": LocalJSX.AppStorageImages & JSXBase.HTMLAttributes<HTMLAppStorageImagesElement>;
            "app-stroke-width": LocalJSX.AppStrokeWidth & JSXBase.HTMLAttributes<HTMLAppStrokeWidthElement>;
            "app-sync-info": LocalJSX.AppSyncInfo & JSXBase.HTMLAttributes<HTMLAppSyncInfoElement>;
            "app-template": LocalJSX.AppTemplate & JSXBase.HTMLAttributes<HTMLAppTemplateElement>;
            "app-template-showcase": LocalJSX.AppTemplateShowcase & JSXBase.HTMLAttributes<HTMLAppTemplateShowcaseElement>;
            "app-templates": LocalJSX.AppTemplates & JSXBase.HTMLAttributes<HTMLAppTemplatesElement>;
            "app-templates-charts": LocalJSX.AppTemplatesCharts & JSXBase.HTMLAttributes<HTMLAppTemplatesChartsElement>;
            "app-templates-community": LocalJSX.AppTemplatesCommunity & JSXBase.HTMLAttributes<HTMLAppTemplatesCommunityElement>;
            "app-templates-content": LocalJSX.AppTemplatesContent & JSXBase.HTMLAttributes<HTMLAppTemplatesContentElement>;
            "app-templates-default": LocalJSX.AppTemplatesDefault & JSXBase.HTMLAttributes<HTMLAppTemplatesDefaultElement>;
            "app-templates-split": LocalJSX.AppTemplatesSplit & JSXBase.HTMLAttributes<HTMLAppTemplatesSplitElement>;
            "app-templates-title": LocalJSX.AppTemplatesTitle & JSXBase.HTMLAttributes<HTMLAppTemplatesTitleElement>;
            "app-templates-user": LocalJSX.AppTemplatesUser & JSXBase.HTMLAttributes<HTMLAppTemplatesUserElement>;
            "app-text": LocalJSX.AppText & JSXBase.HTMLAttributes<HTMLAppTextElement>;
            "app-text-chart": LocalJSX.AppTextChart & JSXBase.HTMLAttributes<HTMLAppTextChartElement>;
            "app-transform-element": LocalJSX.AppTransformElement & JSXBase.HTMLAttributes<HTMLAppTransformElementElement>;
            "app-transform-paragraph": LocalJSX.AppTransformParagraph & JSXBase.HTMLAttributes<HTMLAppTransformParagraphElement>;
            "app-transform-slide": LocalJSX.AppTransformSlide & JSXBase.HTMLAttributes<HTMLAppTransformSlideElement>;
            "app-unpublish": LocalJSX.AppUnpublish & JSXBase.HTMLAttributes<HTMLAppUnpublishElement>;
            "app-unsplash": LocalJSX.AppUnsplash & JSXBase.HTMLAttributes<HTMLAppUnsplashElement>;
            "app-user-delete": LocalJSX.AppUserDelete & JSXBase.HTMLAttributes<HTMLAppUserDeleteElement>;
            "app-user-info": LocalJSX.AppUserInfo & JSXBase.HTMLAttributes<HTMLAppUserInfoElement>;
            "app-user-menu": LocalJSX.AppUserMenu & JSXBase.HTMLAttributes<HTMLAppUserMenuElement>;
            "app-waves": LocalJSX.AppWaves & JSXBase.HTMLAttributes<HTMLAppWavesElement>;
            "app-youtube": LocalJSX.AppYoutube & JSXBase.HTMLAttributes<HTMLAppYoutubeElement>;
            "deckdeckgo-line": LocalJSX.DeckdeckgoLine & JSXBase.HTMLAttributes<HTMLDeckdeckgoLineElement>;
            "deckdeckgo-line-elbow": LocalJSX.DeckdeckgoLineElbow & JSXBase.HTMLAttributes<HTMLDeckdeckgoLineElbowElement>;
            "deckgo-custom-bar-chart": LocalJSX.DeckgoCustomBarChart & JSXBase.HTMLAttributes<HTMLDeckgoCustomBarChartElement>;
            "deckgo-custom-horizontal-bar-chart": LocalJSX.DeckgoCustomHorizontalBarChart & JSXBase.HTMLAttributes<HTMLDeckgoCustomHorizontalBarChartElement>;
            "deckgo-custom-ie-action-button": LocalJSX.DeckgoCustomIeActionButton & JSXBase.HTMLAttributes<HTMLDeckgoCustomIeActionButtonElement>;
            "deckgo-custom-ie-action-image": LocalJSX.DeckgoCustomIeActionImage & JSXBase.HTMLAttributes<HTMLDeckgoCustomIeActionImageElement>;
            "deckgo-custom-ie-align-actions": LocalJSX.DeckgoCustomIeAlignActions & JSXBase.HTMLAttributes<HTMLDeckgoCustomIeAlignActionsElement>;
            "deckgo-custom-ie-color-actions": LocalJSX.DeckgoCustomIeColorActions & JSXBase.HTMLAttributes<HTMLDeckgoCustomIeColorActionsElement>;
            "deckgo-custom-ie-font-size-actions": LocalJSX.DeckgoCustomIeFontSizeActions & JSXBase.HTMLAttributes<HTMLDeckgoCustomIeFontSizeActionsElement>;
            "deckgo-custom-ie-image-actions": LocalJSX.DeckgoCustomIeImageActions & JSXBase.HTMLAttributes<HTMLDeckgoCustomIeImageActionsElement>;
            "deckgo-custom-ie-link-actions": LocalJSX.DeckgoCustomIeLinkActions & JSXBase.HTMLAttributes<HTMLDeckgoCustomIeLinkActionsElement>;
            "deckgo-custom-ie-list-actions": LocalJSX.DeckgoCustomIeListActions & JSXBase.HTMLAttributes<HTMLDeckgoCustomIeListActionsElement>;
            "deckgo-custom-ie-separator": LocalJSX.DeckgoCustomIeSeparator & JSXBase.HTMLAttributes<HTMLDeckgoCustomIeSeparatorElement>;
            "deckgo-custom-ie-style-actions": LocalJSX.DeckgoCustomIeStyleActions & JSXBase.HTMLAttributes<HTMLDeckgoCustomIeStyleActionsElement>;
            "deckgo-custom-ie-triangle": LocalJSX.DeckgoCustomIeTriangle & JSXBase.HTMLAttributes<HTMLDeckgoCustomIeTriangleElement>;
            "deckgo-custom-inline-editor": LocalJSX.DeckgoCustomInlineEditor & JSXBase.HTMLAttributes<HTMLDeckgoCustomInlineEditorElement>;
            "deckgo-custom-line-chart": LocalJSX.DeckgoCustomLineChart & JSXBase.HTMLAttributes<HTMLDeckgoCustomLineChartElement>;
            "deckgo-custom-pie-chart": LocalJSX.DeckgoCustomPieChart & JSXBase.HTMLAttributes<HTMLDeckgoCustomPieChartElement>;
            "deckgo-drr-text": LocalJSX.DeckgoDrrText & JSXBase.HTMLAttributes<HTMLDeckgoDrrTextElement>;
            "deckgo-ie-font-family-actions": LocalJSX.DeckgoIeFontFamilyActions & JSXBase.HTMLAttributes<HTMLDeckgoIeFontFamilyActionsElement>;
            "deckgo-slide-chart-custom": LocalJSX.DeckgoSlideChartCustom & JSXBase.HTMLAttributes<HTMLDeckgoSlideChartCustomElement>;
        }
    }
}
